# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T11:39:38+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Field, RootModel


class Related(BaseModel):
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data.',
        examples=['/users/152184/activities?offset=20'],
    )


class Connections(BaseModel):
    related: Related = Field(..., description='Related content for this activity.')


class Metadata(BaseModel):
    connections: Connections = Field(
        ..., description='A list of resource URIs related to the activity.'
    )


class Type(Enum):
    appearance = 'appearance'
    category = 'category'
    channel = 'channel'
    facebook_feed = 'facebook_feed'
    group = 'group'
    like = 'like'
    ondemand = 'ondemand'
    share = 'share'
    tag = 'tag'
    twitter_timeline = 'twitter_timeline'
    upload = 'upload'


class Embed(BaseModel):
    html: str = Field(
        ...,
        description="The responsive HTML code to embed the playlist on a website. This is present only when `privacy.view` isn't password and when the album has embeddable videos.",
    )


class Layout(Enum):
    grid = 'grid'
    player = 'player'


class Videos(BaseModel):
    options: List[str] = Field(
        ..., description='An array of the HTTP methods permitted on this URI.'
    )
    total: float = Field(
        ..., description='The total number of videos on this connection.', examples=[6]
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data.',
        examples=['/albums/3706071/videos'],
    )


class Connections1(BaseModel):
    videos: Videos = Field(
        ..., description='Information about the videos that belong to this album.'
    )


class AddCustomThumbnails(BaseModel):
    options: List[str] = Field(
        ...,
        description='An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.',
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.',
        examples=['/users/123456/albums/654321/custom_thumbnails'],
    )


class AddLogos(BaseModel):
    options: List[str] = Field(
        ...,
        description='An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.',
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.',
        examples=['/users/123456/albums/654321/logos'],
    )


class AddVideos(BaseModel):
    options: List[str] = Field(
        ...,
        description='An array of HTTP methods allowed on this URI. This data requires a bearer token with the `private` scope.',
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.',
        examples=['/users/123456/albums/654321/videos'],
    )


class Interactions(BaseModel):
    add_custom_thumbnails: AddCustomThumbnails = Field(
        ...,
        description='An action indicating that the authenticated user is an admin of the album and may therefore add custom thumbnails. This data requires a bearer token with the `private` scope.',
    )
    add_logos: AddLogos = Field(
        ...,
        description='An action indicating that the authenticated user is an admin of the album and may therefore add custom logos. This data requires a bearer token with the `private` scope.',
    )
    add_videos: AddVideos = Field(
        ...,
        description='An action indicating that the authenticated user is an admin of the album and may therefore add videos. This data requires a bearer token with the `private` scope.',
    )


class Metadata1(BaseModel):
    connections: Connections1 = Field(
        ...,
        description='A collection of information that is connected to this resource.',
    )
    interactions: Interactions = Field(
        ..., description='A list of resource URIs related to the album.'
    )


class View(Enum):
    anybody = 'anybody'
    embed_only = 'embed_only'
    password = 'password'


class Privacy(BaseModel):
    password: Optional[str] = Field(
        None,
        description='The privacy-enabled password to see this album. Present only when `privacy.view` is `password`.',
        examples=['hunter1'],
    )
    view: View = Field(
        ...,
        description='Who can view the album:\n\nOption descriptions:\n * `anybody` - Anyone can view the album.\n * `embed_only` - Only owner can see album, can be embedded off-site\n * `password` - Only those with the password can view the album.\n',
        examples=['anybody'],
    )


class Sort(Enum):
    added_first = 'added_first'
    added_last = 'added_last'
    alphabetical = 'alphabetical'
    arranged = 'arranged'
    comments = 'comments'
    likes = 'likes'
    newest = 'newest'
    oldest = 'oldest'
    plays = 'plays'


class Theme(Enum):
    dark = 'dark'
    standard = 'standard'


class ApiApp(BaseModel):
    name: str = Field(
        ..., description='The name of the API app.', examples=['Vimeo Android']
    )
    uri: str = Field(
        ..., description='The canonical URI of the API app.', examples=['/apps/12345']
    )


class TokenType(Enum):
    bearer = 'bearer'


class AuthError(BaseModel):
    error: str = Field(
        ..., description='The name of the error.', examples=['server_error']
    )
    error_description: str = Field(
        ...,
        description='The description of the error.',
        examples=["An error has occurred on Vimeo's servers. Please try again."],
    )


class Channels(BaseModel):
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    total: float = Field(
        ...,
        description='The total number of channels on this connection.',
        examples=[90],
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data.',
        examples=['/categories/animation/channels'],
    )


class Groups(BaseModel):
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    total: float = Field(
        ..., description='The total number of groups on this connection.', examples=[15]
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data.',
        examples=['/categories/animation/groups'],
    )


class Users(BaseModel):
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    total: float = Field(
        ..., description='The total number of users on this connection.', examples=[140]
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data.',
        examples=['/categories/animation/videos'],
    )


class Videos1(BaseModel):
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    total: float = Field(
        ...,
        description='The total number of videos on this connection.',
        examples=[960],
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data.',
        examples=['/categories/animation/videos'],
    )


class Connections2(BaseModel):
    channels: Channels = Field(
        ..., description='Information about the channels related to this category.'
    )
    groups: Groups = Field(
        ..., description='Information about the groups related to this category.'
    )
    users: Users = Field(
        ..., description='Information about the users related to this category.'
    )
    videos: Videos1 = Field(
        ..., description='Information about the videos related to this category.'
    )


class Follow(BaseModel):
    added: bool = Field(
        ...,
        description='Whether the authenticated user has followed this category.',
        examples=['true'],
    )
    added_time: str = Field(
        ...,
        description="The time in ISO 8601 format that the user followed this category, or the null value if the user hasn't followed this category.",
        examples=['2017-05-17T17:46:09+00:00'],
    )
    uri: str = Field(
        ...,
        description='The URI for following or unfollowing this category: PUT to this URI to follow the category, or DELETE to this URI to unfollow the category.',
        examples=['/users/152184/categories/animation'],
    )


class Interactions1(BaseModel):
    follow: Follow = Field(
        ...,
        description='An action indicating if the authenticated user has followed this category.',
    )


class Metadata2(BaseModel):
    connections: Connections2 = Field(
        ...,
        description='A collection of information that is connected to this resource.',
    )
    interactions: Interactions1 = Field(
        ..., description='The permissible actions related to the category.'
    )


class Parent(BaseModel):
    link: str = Field(
        ...,
        description='The URL to access the parent category in a browser.',
        examples=['https://vimeo.com/categories/animation'],
    )
    name: str = Field(
        ...,
        description='The display name that identifies the parent category.',
        examples=['Animation'],
    )
    uri: str = Field(
        ...,
        description='The unique identifier to access the parent of this category resource.',
        examples=['/categories/animation'],
    )


class Subcategory(BaseModel):
    link: str = Field(
        ...,
        description='The URL to access the subcategory in a browser.',
        examples=['https://vimeo.com/categories/animation/2d/videos'],
    )
    name: str = Field(
        ...,
        description='The display name that identifies the subcategory.',
        examples=['2D'],
    )
    uri: str = Field(
        ...,
        description='The unique identifier to access the subcategory resource.',
        examples=['/categories/animation/subcategories/2d'],
    )


class PrivacyUsers(BaseModel):
    options: List[str] = Field(
        ...,
        description='An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.',
    )
    total: float = Field(
        ...,
        description='The total number of users on this connection. This data requires a bearer token with the `private` scope.',
        examples=[36],
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.',
        examples=['/channels/927/privacy/users'],
    )


class Users1(BaseModel):
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    total: float = Field(
        ...,
        description='The total number of users on this connection.',
        examples=[794634],
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data.',
        examples=['/channels/927/users'],
    )


class Videos2(BaseModel):
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    total: float = Field(
        ...,
        description='The total number of videos on this connection.',
        examples=[12448],
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data.',
        examples=['/channels/927/videos'],
    )


class Connections3(BaseModel):
    privacy_users: PrivacyUsers = Field(
        ...,
        description='Information provided to channel moderators about which users they have specifically permitted to access a private channel. This data requires a bearer token with the `private` scope.',
    )
    users: Users1 = Field(
        ...,
        description='Information about the users following or moderating this channel.',
    )
    videos: Videos2 = Field(
        ..., description='Information about the videos that belong to this channel.'
    )


class AddModerators(BaseModel):
    options: List[str] = Field(
        ...,
        description='An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.',
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.',
        examples=['/channels/1234/moderators'],
    )


class AddTo(BaseModel):
    options: List[str] = Field(
        ...,
        description='An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.',
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.',
        examples=['/channels/1234/videos/5678'],
    )


class Type1(Enum):
    moderator = 'moderator'
    subscriber = 'subscriber'


class Follow1(BaseModel):
    added: bool = Field(
        ...,
        description='Whether the authenticated user has followed this channel. This data requires a bearer token with the `private` scope.',
        examples=['true'],
    )
    added_time: str = Field(
        ...,
        description="The time in ISO 8601 format that the user followed this channel, or the null value if the user hasn't followed the channel. This data requires a bearer token with the `private` scope.",
        examples=['2017-05-22T17:50:11+00:00'],
    )
    type: Type1 = Field(
        ...,
        description='Whether the authenticated user is a moderator or subscriber. This data requires a bearer token with the `private` scope.\n\nOption descriptions:\n * `moderator` - The authenticated user is a moderator.\n * `subscriber` - The authenticated user is a subscriber.\n',
        examples=['moderator'],
    )
    uri: str = Field(
        ...,
        description='The URI for following or unfollowing this channel. PUT to this URI to follow the channel, or DELETE to this URI to unfollow the channel. This data requires a bearer token with the `private` scope.',
        examples=['/users/1234/channels/927'],
    )


class ModerateVideos(BaseModel):
    options: List[str] = Field(
        ...,
        description='An array of HTTP methods allowed on this URI. This data requires a bearer token with the `private` scope.',
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.',
        examples=['/channels/1234/videos'],
    )


class Interactions2(BaseModel):
    add_moderators: AddModerators = Field(
        ...,
        description='An action indicating that the authenticated user is the owner of the channel and may therefore add other users as channel moderators. This data requires a bearer token with the `private` scope.',
    )
    add_to: AddTo = Field(
        ...,
        description='When a channel appears in the context of adding or removing a video from it (`/videos/{video_id}/available_channels`), include information about adding or removing the video. This data requires a bearer token with the `private` scope.',
    )
    follow: Follow1 = Field(
        ...,
        description='An action indicating if the authenticated user has followed this channel. This data requires a bearer token with the `private` scope.',
    )
    moderate_videos: ModerateVideos = Field(
        ...,
        description='An action indicating that the authenticated user is a moderator of the channel and may therefore add or remove videos from the channel. This data requires a bearer token with the `private` scope.',
    )


class Metadata3(BaseModel):
    connections: Connections3 = Field(
        ...,
        description='A collection of information that is connected to this resource.',
    )
    interactions: Interactions2 = Field(
        ..., description='A list of resource URIs related to the channel.'
    )


class View1(Enum):
    anybody = 'anybody'
    moderators = 'moderators'
    users = 'users'


class Privacy1(BaseModel):
    view: View1 = Field(
        ...,
        description='Who can view the channel:\n\nOption descriptions:\n * `anybody` - Anyone can view the channel.\n * `moderators` - Only moderators can view the channel.\n * `users` - Only registered users can view the channel.\n',
        examples=['anybody'],
    )


class Replies(BaseModel):
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    total: float = Field(
        ...,
        description='The total number of replies on this connection.',
        examples=[42],
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data.',
        examples=['/videos/258684937/comments/12345/replies'],
    )


class Connections4(BaseModel):
    replies: Replies = Field(
        ..., description="Information about this comment's replies."
    )


class Metadata4(BaseModel):
    connections: Connections4


class Type2(Enum):
    video = 'video'


class Code(Enum):
    drugs = 'drugs'
    language = 'language'
    nudity = 'nudity'
    safe = 'safe'
    unrated = 'unrated'
    violence = 'violence'


class ContentRating(BaseModel):
    code: Code = Field(
        ...,
        description='The code that uniquely identifies this content rating:\n\nOption descriptions:\n * `drugs` - Drug or alcohol use.\n * `language` - Profanity or sexually suggestive content.\n * `nudity` - Nudity.\n * `safe` - Suitable for all audiences.\n * `unrated` - No rating.\n * `violence` - Violent or graphic content.\n',
        examples=['violence'],
    )
    name: str = Field(
        ...,
        description='The description of this content rating.',
        examples=['Violence'],
    )
    uri: str = Field(
        ...,
        description='The canonical relative URI of the content rating.',
        examples=['/contentrating/violence'],
    )


class Code1(Enum):
    by = 'by'
    by_nc = 'by-nc'
    by_nc_nd = 'by-nc-nd'
    by_nc_sa = 'by-nc-sa'
    by_nd = 'by-nd'
    by_sa = 'by-sa'
    cc0 = 'cc0'


class CreativeCommons(BaseModel):
    code: Code1 = Field(
        ...,
        description='The code that uniquely identifies this Creative Commons license:\n\nOption descriptions:\n * `by` - Attribution\n * `by-nc` - Attribution Non-Commercial\n * `by-nc-nd` - Attribution Non-Commercial No Derivatives\n * `by-nc-sa` - Attribution Non-Commercial Share Alike\n * `by-nd` - Attribution No Derivatives\n * `by-sa` - Attribution Share Alike\n * `cc0` - Public Domain Dedication\n',
        examples=['by-sa'],
    )
    name: str = Field(
        ...,
        description='The description of this Creative Commons license.',
        examples=['Attribution Share Alike'],
    )
    uri: str = Field(
        ...,
        description='The canonical relative URI of the Creative Commons license.',
        examples=['/creativecommons/by-sa'],
    )


class Domain(BaseModel):
    allow_hd: bool = Field(
        ...,
        description='Whether to permit HD embeds on this domain.',
        examples=['true'],
    )
    domain: str = Field(..., description='The domain name.', examples=['example.com'])
    uri: str = Field(
        ...,
        description='The URI of the domain.',
        examples=['/videos/258684937/privacy/domains/example.com'],
    )


class Buttons(BaseModel):
    embed: bool = Field(
        ...,
        description='Whether the Embed button appears in the embeddable player for this video.',
        examples=['true'],
    )
    fullscreen: bool = Field(
        ...,
        description='Whether the Fullscreen button appears in the embeddable player for this video.',
        examples=['true'],
    )
    hd: bool = Field(
        ...,
        description='Whether the HD button appears in the embeddable player for this video.',
        examples=['true'],
    )
    like: bool = Field(
        ...,
        description='Whether the Like button appears in the embeddable player for this video.',
        examples=['true'],
    )
    scaling: bool = Field(
        ...,
        description='Whether the Scaling button appears in the embeddable player for this video.',
        examples=['true'],
    )
    share: bool = Field(
        ...,
        description='Whether the Share button appears in the embeddable player for this video.',
        examples=['true'],
    )
    watchlater: bool = Field(
        ...,
        description='Whether the Watch Later button appears in the embeddable player for this video.',
        examples=['true'],
    )


class Custom(BaseModel):
    active: bool = Field(
        ...,
        description='Whether the custom logo appears in the embeddable player.',
        examples=['true'],
    )
    link: str = Field(
        ...,
        description='The URL that loads upon clicking the custom logo.',
        examples=['http://example.com'],
    )
    sticky: bool = Field(
        ...,
        description='Whether the custom logo appears even when the player interface is hidden.',
        examples=['true'],
    )


class Logos(BaseModel):
    custom: Custom = Field(
        ...,
        description='A collection of information relating to custom logos in the embeddable player.',
    )
    vimeo: bool = Field(
        ...,
        description='Whether the Vimeo logo appears in the embeddable player for this video.',
        examples=['true'],
    )


class Name(Enum):
    hide = 'hide'
    show = 'show'
    user = 'user'


class Owner(Enum):
    hide = 'hide'
    show = 'show'
    user = 'user'


class Portrait(Enum):
    hide = 'hide'
    show = 'show'
    user = 'user'


class Title(BaseModel):
    name: Name = Field(
        ...,
        description='How the embeddable player handles the video title:\n\nOption descriptions:\n * `hide` - The title is hidden.\n * `show` - The title is shown.\n',
        examples=['hide'],
    )
    owner: Owner = Field(
        ...,
        description="How the embeddable player handles the video owner's information:\n\nOption descriptions:\n * `hide` - The owner's information is hidden.\n * `show` - The owner's information is shown.\n",
        examples=['hide'],
    )
    portrait: Portrait = Field(
        ...,
        description="How the embeddable player handles the video owner's portrait:\n\nOption descriptions:\n * `hide` - The owner's portrait is hidden\n * `show` - The owner's portrait is shown.\n",
        examples=['hide'],
    )


class EmbedSettings(BaseModel):
    buttons: Buttons = Field(
        ...,
        description='A collection of information about the buttons that appear on the interface of the embeddable player.',
    )
    color: str = Field(
        ...,
        description='The primary player color, which controls the color of the progress bar, buttons, and more.',
        examples=['#0a0808'],
    )
    logos: Logos = Field(
        ...,
        description='A collection of information about the logo in the corner of the embeddable player.',
    )
    playbar: bool = Field(
        ...,
        description='Whether the playbar appears in the embeddable player for this video.',
        examples=['true'],
    )
    speed: bool = Field(
        ...,
        description='Whether the speed controls appear in the embeddable player for this video.',
        examples=['true'],
    )
    title: Title = Field(
        ...,
        description="A collection of information relating to the embeddable player's title bar.",
    )
    uri: Optional[str] = Field(
        None,
        description='The URI of the embed preset.',
        examples=['/videos/258684937/presets/12345'],
    )
    volume: bool = Field(
        ...,
        description='Whether the volume controls appear in the embeddable player for this video.',
        examples=['true'],
    )


class Endpoint(BaseModel):
    methods: List[str] = Field(
        ..., description='All HTTP methods permitted on this endpoint.'
    )
    path: str = Field(
        ...,
        description='The path section of the URL, which, when appended to the API host `https:///api.vimeo.com`, builds a full API endpoint.',
        examples=['/me'],
    )


class Error(BaseModel):
    developer_message: str = Field(
        ...,
        description='The error message that developers receive.',
        examples=['The specified resource does not exist.'],
    )
    error: str = Field(
        ...,
        description='The error message that non-developer users receive.',
        examples=['Something strange occurred. Please try again.'],
    )
    error_code: float = Field(..., description='The error code.', examples=[5000])
    link: str = Field(..., description='A link to more information about the error.')


class Users2(BaseModel):
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    total: float = Field(
        ...,
        description='The total number of users on this connection.',
        examples=[25798],
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data.',
        examples=['/groups/1108/users'],
    )


class Videos3(BaseModel):
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    total: float = Field(
        ...,
        description='The total number of videos on this connection.',
        examples=[7252],
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data.',
        examples=['/groups/1108/videos'],
    )


class Connections5(BaseModel):
    users: Users2 = Field(
        ..., description='Information about the members or moderators of this group.'
    )
    videos: Videos3 = Field(
        ..., description='Information about the videos contained within this group.'
    )


class Type3(Enum):
    member = 'member'
    moderator = 'moderator'


class Join(BaseModel):
    added: bool = Field(
        ...,
        description='Whether the authenticated user has followed this group. This data requires a bearer token with the `private` scope.',
        examples=['true'],
    )
    added_time: str = Field(
        ...,
        description='The time in ISO 8601 format when the user joined this group. This data requires a bearer token with the `private` scope.',
    )
    title: str = Field(
        ...,
        description="The user's title, or the null value if not applicable. This data requires a bearer token with the `private` scope.",
        examples=['Vimeo Staff'],
    )
    type: Type3 = Field(
        ...,
        description='Whether the authenticated user is a moderator or subscriber. This data requires a bearer token with the `private` scope.\n\nOption descriptions:\n * `member` - The authenticated user is a member.\n * `moderator` - The authenticated user is a moderator.\n',
        examples=['member'],
    )
    uri: str = Field(
        ...,
        description='The URI for following. PUT to this URI to follow, or DELETE to this URI to unfollow. This data requires a bearer token with the `private` scope.',
        examples=['/users/152184/groups/1108'],
    )


class Interactions3(BaseModel):
    join: Join = Field(
        ...,
        description='An action indicating that someone has joined the group. This data requires a bearer token with the `private` scope.',
    )


class Metadata5(BaseModel):
    connections: Connections5 = Field(
        ...,
        description='A collection of information that is connected to this resource.',
    )
    interactions: Interactions3 = Field(
        ...,
        description='User actions that have involved the group. This data requires a bearer token with the `private` scope.',
    )


class Comment1(Enum):
    all = 'all'
    members = 'members'


class Invite(Enum):
    all = 'all'
    members = 'members'


class Join1(Enum):
    anybody = 'anybody'
    members = 'members'


class Videos4(Enum):
    all = 'all'
    members = 'members'


class View2(Enum):
    anybody = 'anybody'
    members = 'members'


class Privacy2(BaseModel):
    comment: Comment1 = Field(
        ...,
        description='Who can comment on the group:\n\nOption descriptions:\n * `all` - Anyone can comment on the group.\n * `members` - Only members can comment on the group.\n',
        examples=['all'],
    )
    invite: Invite = Field(
        ...,
        description='Who can invite new members to the group:\n\nOption descriptions:\n * `all` - Anyone can invite new members to join.\n * `members` - Only group members can invite new members to join.\n',
        examples=['all'],
    )
    join: Join1 = Field(
        ...,
        description='Who can join the group:\n\nOption descriptions:\n * `anybody` - Anyone can join the group.\n * `members` - Only people with a Vimeo account can join the group.\n',
        examples=['anybody'],
    )
    videos: Videos4 = Field(
        ...,
        description='Who can add videos to the group:\n\nOption descriptions:\n * `all` - Anyone can add videos to the group.\n * `members` - Only group members can add videos to the group.\n',
        examples=['all'],
    )
    view: View2 = Field(
        ...,
        description='Who can view the group:\n\nOption descriptions:\n * `anybody` - Anyone can view the group.\n * `members` - Only group members can view the group.\n',
        examples=['anybody'],
    )


class Language(BaseModel):
    code: str = Field(
        ..., description='The code that represents this language.', examples=['en-US']
    )
    name: str = Field(
        ...,
        description='The name of the language.',
        examples=['English (United States)'],
    )


class LegacyError(BaseModel):
    error: str = Field(
        ...,
        description='User-friendly error message',
        examples=['Something strange occurred. Please try again.'],
    )


class Page(BaseModel):
    added: bool = Field(
        ..., description='Whether this On Demand genre was added.', examples=['true']
    )
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    uri: str = Field(
        ...,
        description='The URI to access the On Demand page.',
        examples=['/ondemand/genres/horror/pages/12345'],
    )


class Interactions4(BaseModel):
    page: Page = Field(
        ..., description='Interactions for On Demand pages that are in this genre.'
    )


class Pages(BaseModel):
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data.',
        examples=['/ondemand/genres/horror/pages'],
    )


class Connections6(BaseModel):
    pages: Pages = Field(
        ..., description='Information about the On Demand pages related to this group.'
    )


class Metadata6(BaseModel):
    connections: Connections6 = Field(
        ..., description='A collection of information connected to this resource.'
    )


class OnDemandGenre(BaseModel):
    canonical: str = Field(
        ...,
        description='The canonical name or URL slug of the genre.',
        examples=['horror'],
    )
    interactions: Interactions4
    link: str = Field(
        ...,
        description='The Vimeo URL for this genre.',
        examples=['http://vimeo.com/ondemand/browse/horror'],
    )
    metadata: Metadata6
    name: str = Field(
        ..., description='The descriptive name of the genre.', examples=['Horror']
    )
    uri: str = Field(
        ...,
        description='The relative URI of the On Demand genre.',
        examples=['/ondemand/genres/horror'],
    )


class Colors(BaseModel):
    primary: str = Field(
        ...,
        description="The hexadecimal color code for the page's primary color.",
        examples=['#0a0808'],
    )
    secondary: str = Field(
        ...,
        description="The hexadecimal color code for the page's secondary color.",
        examples=['#ba4a17'],
    )


class Buy(BaseModel):
    active: bool = Field(
        ...,
        description='Whether all the videos on this On Demand page can be purchased as a whole.',
        examples=['true'],
    )
    price: float = Field(
        ..., description='The default price to buy an episode.', examples=[9.99]
    )


class Period(Enum):
    field_1_day = '1 day'
    field_1_month = '1 month'
    field_1_week = '1 week'
    field_1_year = '1 year'
    field_2_day = '2 day'
    field_24_hour = '24 hour'
    field_3_day = '3 day'
    field_3_month = '3 month'
    field_30_day = '30 day'
    field_48_hour = '48 hour'
    field_6_month = '6 month'
    field_60_day = '60 day'
    field_7_day = '7 day'
    field_72_hour = '72 hour'


class Rent(BaseModel):
    active: bool = Field(
        ...,
        description='Whether all the videos on this On Demand page can be rented as a whole.',
        examples=['true'],
    )
    period: Period = Field(
        ...,
        description='The rental period for the video:\n\nOption descriptions:\n * `1 day` - The rental period is one day.\n * `1 month` - The rental period is one month.\n * `1 week` - The rental period is one week.\n * `1 year` - The rental period is one year.\n * `2 day` - The rental period is two days.\n * `24 hour` - The rental period is 24 hours.\n * `3 day` - The rental period is three days.\n * `3 month` - The rental period is three months.\n * `30 day` - The rental period is 30 days.\n * `48 hour` - The rental period is 48 hours.\n * `6 month` - The rental period is six months.\n * `60 day` - The rental period is 60 days.\n * `7 day` - The rental period is 7 days.\n * `72 hour` - The rental period is 72 hours.\n',
        examples=['1 day'],
    )
    price: float = Field(
        ..., description='The default price to rent an episode.', examples=[2.99]
    )


class Episodes(BaseModel):
    buy: Buy
    rent: Rent


class Comments(BaseModel):
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    total: float = Field(
        ...,
        description='The total number of comments on this connection.',
        examples=[4],
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data.',
        examples=['/ondemand/pages/61326/comments'],
    )


class Genres(BaseModel):
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    total: float = Field(
        ..., description='The total number of genres on this connection.', examples=[9]
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data.',
        examples=['/ondemand/pages/61326/genres'],
    )


class Likes(BaseModel):
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    total: float = Field(
        ..., description='The total number of likes on this connection.', examples=[15]
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data.',
        examples=['/ondemand/pages/61326/likes'],
    )


class Pictures(BaseModel):
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    total: float = Field(
        ...,
        description='The total number of pictures on this connection.',
        examples=[3],
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data.',
        examples=['/ondemand/pages/61326/pictures'],
    )


class Seasons(BaseModel):
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    total: float = Field(
        ..., description='The total number of seasons on this connection.', examples=[3]
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data.',
        examples=['/ondemand/pages/61326/seasons'],
    )


class Videos5(BaseModel):
    extra_total: float = Field(
        ..., description='The total number of extra videos.', examples=[14]
    )
    main_total: float = Field(
        ..., description='The total number of main videos.', examples=[36]
    )
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    total: float = Field(
        ..., description='The total number of videos on this connection.', examples=[50]
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data.',
        examples=['/ondemand/pages/61326/videos'],
    )
    viewable_total: float = Field(
        ..., description='The total number of viewable videos.', examples=[50]
    )


class Connections8(BaseModel):
    comments: Comments = Field(
        ..., description='Information about the comments associated with this page.'
    )
    genres: Genres = Field(
        ..., description='Information about the genres associated with this page.'
    )
    likes: Likes = Field(
        ..., description='Information about the likes associated with this page.'
    )
    pictures: Pictures = Field(
        ..., description='Information about the pictures associated with this page.'
    )
    seasons: Seasons = Field(
        ..., description='Information about the seasons associated with this page.'
    )
    videos: Videos5 = Field(
        ..., description='Information about the videos associated with this page.'
    )


class Metadata8(BaseModel):
    connections: Connections8


class Connections7(BaseModel):
    metadata: Metadata8


class Preorder(BaseModel):
    active: bool = Field(
        ...,
        description='Whether this page is available for preorder.',
        examples=['true'],
    )
    cancel_time: str = Field(
        ...,
        description='The time in ISO 8601 format when the preorder was cancelled.',
        examples=['2017-05-16T13:13:46+00:00'],
    )
    publish_time: str = Field(
        ...,
        description='The time in ISO 8601 format when the preorder was released to the public.',
        examples=['2017-05-15T13:12:52+00:00'],
    )
    time: str = Field(
        ...,
        description='The time in ISO 8601 format when the preorder started.',
        examples=['2017-05-15T13:13:31+00:00'],
    )


class Published(BaseModel):
    enabled: bool = Field(
        ...,
        description='Whether this On Demand page has been published.',
        examples=['true'],
    )
    time: str = Field(
        ...,
        description='The time in IS 8601 format when this page was published.',
        examples=['2017-05-15T13:12:52+00:00'],
    )


class Subscription(BaseModel):
    active: bool = Field(
        ..., description='Whether this product is active.', examples=['true']
    )
    link: str = Field(
        ...,
        description='The link to this product on Vimeo.',
        examples=['https://vimeo.com/ondemand/darbyforever'],
    )
    period: Optional[str] = Field(None, description="The product's rental period.")
    price: Dict[str, Any] = Field(
        ...,
        description='The accepted currencies and respective pricing for this product.',
    )


class Type4(Enum):
    film = 'film'
    series = 'series'


class AccessType(Enum):
    default = 'default'
    vip = 'vip'


class DiscountType(Enum):
    dollars = 'dollars'
    free = 'free'
    percent = 'percent'


class Codes(BaseModel):
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    total: float = Field(
        ..., description='The total number of uses on this connection.', examples=[1]
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data.',
        examples=['/ondemand/pages/61326/promotion/12345/codes'],
    )


class Connections9(BaseModel):
    codes: Codes = Field(
        ..., description='Information about the codes associated with this promotion.'
    )


class Metadata9(BaseModel):
    connections: Connections9 = Field(
        ..., description='A list of resource URIs related to the On Demand promotion.'
    )


class ProductType(Enum):
    any = 'any'
    buy = 'buy'
    buy_episode = 'buy_episode'
    rent = 'rent'
    rent_episode = 'rent_episode'
    subscribe = 'subscribe'


class StreamPeriod(Enum):
    field_1_week = '1_week'
    field_1_year = '1_year'
    field_24_hour = '24_hour'
    field_30_days = '30_days'
    field_3_month = '3_month'
    field_48_hour = '48_hour'
    field_6_month = '6_month'
    field_72_hour = '72_hour'


class Type5(Enum):
    batch = 'batch'
    batch_prefix = 'batch_prefix'
    single = 'single'


class OnDemandPromotion(BaseModel):
    access_type: AccessType = Field(
        ...,
        description="The type of access that this promotion grants:\n\nOption descriptions:\n * `default` - Grants discounts on existing product offerings.\n * `vip` - Grants free access either to VOD content before it is released or to access types that aren't part of the existing product offerings.\n",
        examples=['default'],
    )
    discount_type: DiscountType = Field(
        ...,
        description='The type of discount for which this promotion can be used.\n\nOption descriptions:\n * `dollars` - The discount is a certain fixed amount.\n * `free` - The discount is the full purchase price. VIP access promotions always use this discount type.\n * `percent` - The discount is a certain percentage of the full price.\n',
        examples=['free'],
    )
    download: bool = Field(
        ...,
        description='Whether this promotion grants download access to On Demand content.',
        examples=['true'],
    )
    label: str = Field(
        ...,
        description='The prefix string for batch codes, or the null value for single codes.',
        examples=['8jgaieumbzstujhn8k304iwwezawkvwm'],
    )
    metadata: Metadata9 = Field(..., description="The video's metadata.")
    percent_off: float = Field(
        ...,
        description='The percentage amount that is deducted from the product price.',
        examples=[100],
    )
    product_type: ProductType = Field(
        ...,
        description='The type of product to which this promotion can be applied. Only `buy` and `rent` are available for the VIP access type:\n\nOption descriptions:\n * `any` - The promotion can be applied to any product.\n * `buy` - The promotion can be applied to a buyable single video.\n * `buy_episode` - The promotion can be applied to a buyable single episode.\n * `rent` - The promotion can be applied to a rentable single video.\n * `rent_episode` - The promotion can be applied to a rentable single episode.\n * `subscribe` - The promotion can be applied to a subscription.\n',
        examples=['any'],
    )
    stream_period: StreamPeriod = Field(
        ...,
        description='The amount of time that the user has access to the VOD content after redeeming a promo code.\n\nOption descriptions:\n * `1_week` - Access lasts for one week.\n * `1_year` - Access lasts for one year.\n * `24_hour` - Access lasts for 24 hours.\n * `30_days` - Access lasts for 30 days.\n * `3_month` - Access lasts for 3 months.\n * `48_hour` - Access lasts for 48 hours.\n * `6_month` - Access lasts for 6 months.\n * `72_hour` - Access lasts for 72 hours.\n',
        examples=['1_week'],
    )
    total: float = Field(
        ...,
        description='The total amount of times that this promotion can be used.',
        examples=[1],
    )
    type: Type5 = Field(
        ...,
        description='The way in which this promotion can generate promo codes:\n\nOption descriptions:\n * `batch` - Provides many unique promo codes that can only be used once each.\n * `batch_prefix` - Similar to `batch`, except that all codes have a similar prefix string. This mode is deprecated, yet it may still appear for some users.\n * `single` - Provides a single promo code with many uses.\n',
        examples=['batch'],
    )
    uri: str = Field(
        ...,
        description="The promotion's canonical relative URI.",
        examples=['/ondemand/pages/61326/promotions/12345'],
    )


class OnDemandPromotionCode(BaseModel):
    code: str = Field(
        ...,
        description='A promotion code that can be redeemed on Vimeo.',
        examples=['8jgaieumbzstujhn8k304iwwezawkvwm'],
    )
    link: str = Field(
        ...,
        description='A link to redeem the promotion code instantly.',
        examples=['https://vimeo.com/r/0trBLg/OGpnYWlldW'],
    )
    max_uses: float = Field(
        ...,
        description='The total amount of times this code can be used.',
        examples=[1],
    )
    uses: float = Field(
        ...,
        description='The number of times that this code has been used.',
        examples=[0],
    )


class OnDemandRegion(BaseModel):
    country_code: str = Field(
        ...,
        description='The ISO 3166-1 alpha-2 code for this country.',
        examples=['US'],
    )
    country_name: str = Field(
        ...,
        description='The descriptive name of this country.',
        examples=['United States'],
    )
    uri: str = Field(
        ...,
        description="The region container's relative URI.",
        examples=['/ondemand/pages/61326/regions/US'],
    )


class Videos6(BaseModel):
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    total: float = Field(
        ..., description='The total number of videos on this connection.', examples=[13]
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection ∂data.',
        examples=['/ondemand/pages/61326/season/12345/videos'],
    )


class Connections10(BaseModel):
    videos: Videos6 = Field(..., description='The Videos connection.')


class Metadata10(BaseModel):
    connections: Connections10


class Buy1(BaseModel):
    active: bool = Field(
        ...,
        description='Whether this On Demand video can be purchased.',
        examples=['true'],
    )
    price: Dict[str, Any] = Field(..., description='A map of currency type to price.')
    purchased: Optional[bool] = Field(
        None,
        description='Whether this On Demand video has been purchased.',
        examples=['true'],
    )


class Page1(BaseModel):
    added: bool = Field(
        ..., description='Whether this On Demand page was added.', examples=['true']
    )
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    uri: str = Field(
        ...,
        description='The URI to access the On Demand page.',
        examples=['/ondemand/pages/61326'],
    )


class Interactions5(BaseModel):
    page: Page1 = Field(
        ...,
        description="Information about how the authenticated user can interact with the connection to the video's On Demand page.",
    )


class Season(BaseModel):
    name: str = Field(
        ...,
        description='The name of the season on this connection.',
        examples=['Season 1'],
    )
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data.',
        examples=['/ondemand/pages/61326/seasons/12345'],
    )


class Connections11(BaseModel):
    season: Season = Field(..., description='Information about this season.')


class Likes1(BaseModel):
    added: bool = Field(
        ..., description='Whether the user has liked this video.', examples=['true']
    )
    added_time: str = Field(
        ...,
        description='The time in ISO 8601 format when the user liked this video.',
        examples=['2017-05-12T21:42:42+00:00'],
    )
    uri: str = Field(
        ...,
        description='The URI for the user to like this video.',
        examples=['/users/152184/likes/12345'],
    )


class Watchlater(BaseModel):
    added: bool = Field(
        ...,
        description='Whether the user has added this video to their Watch Later queue.',
        examples=['true'],
    )
    added_time: str = Field(
        ...,
        description='The time in ISO 8601 format when the user added this video to their Watch Later queue.',
        examples=['2017-05-12T21:42:42+00:00'],
    )
    uri: str = Field(
        ...,
        description='The URI for the user to add this video to their Watch Later queue.',
        examples=['/users/152184/watchlater/12345'],
    )


class Interactions6(BaseModel):
    likes: Likes1 = Field(
        ...,
        description="Information about the user's Like interactions with this video.",
    )
    watchlater: Watchlater = Field(
        ...,
        description="Information about the user's Watch Later interactions with this video.",
    )


class Metadata11(BaseModel):
    connections: Connections11
    interactions: Interactions6


class Rent1(BaseModel):
    active: bool = Field(
        ...,
        description='Whether this On Demand video can be rented.',
        examples=['true'],
    )
    price: Dict[str, Any] = Field(..., description='A map of currency type to price.')
    purchased: Optional[bool] = Field(
        None,
        description='Whether this On Demand video has been rented.',
        examples=['true'],
    )


class Type6(Enum):
    extra = 'extra'
    main = 'main'
    trailer = 'trailer'


class Size(BaseModel):
    height: float = Field(..., description='The height of the image.', examples=[720])
    link: str = Field(
        ...,
        description='The direct link to the image.',
        examples=['https://i.vimeocdn.com/video/581495283_1280x720.jpg?r=pad'],
    )
    link_with_play_button: Optional[str] = Field(
        None,
        description='The direct link to the image with a play button overlay.',
        examples=[
            'https://i.vimeocdn.com/filter/overlay?src0=https%3A%2F%2Fi.vimeocdn.com%2Fvideo%2F581495283_1280x720.jpg&src1=http%3A%2F%2Ff.vimeocdn.com%2Fp%2Fimages%2Fcrawler_play.png'
        ],
    )
    width: float = Field(..., description='The width of the image.', examples=[1280])


class Type7(Enum):
    caution = 'caution'
    custom = 'custom'
    default = 'default'


class Picture(BaseModel):
    active: bool = Field(
        ...,
        description='Whether this picture is the active picture for its parent resource.',
        examples=['true'],
    )
    link: Optional[str] = Field(
        None,
        description='The upload URL for the picture. This field appears when you create the picture resource for the first time.',
    )
    resource_key: str = Field(
        ...,
        description="The picture's resource key string.",
        examples=['dc724af18fbdd4e59189f5fe768a5f8311527050'],
    )
    sizes: List[Size] = Field(
        ...,
        description='An array containing reference information about all available image files.',
    )
    type: Type7 = Field(
        ...,
        description='The type of the picture:\n\nOption descriptions:\n * `caution` - An image that is appropriate for all ages.\n * `custom` - A custom image for the video.\n * `default` - The default image for the video.\n',
        examples=['caution'],
    )
    uri: str = Field(
        ..., description="The picture's URI.", examples=['/users/152184/pictures/12345']
    )


class Type8(Enum):
    source = 'source'
    video_mp4 = 'video/mp4'
    video_webm = 'video/webm'
    vp6_x_video = 'vp6/x-video'


class ProgressiveItem(BaseModel):
    created_time: str = Field(
        ...,
        description='The time in ISO 8601 format when this video file was created.',
        examples=['2017-05-16T17:21:51+00:00'],
    )
    fps: float = Field(..., description='The FPS of the video file.', examples=[30])
    height: float = Field(
        ..., description='The height in pixels of the video.', examples=[720]
    )
    link: str = Field(..., description='The direct link to this video file.')
    link_expiration_time: str = Field(
        ...,
        description='The time in ISO 8601 format when the link to this video file expires.',
        examples=['2017-05-16T17:21:51+00:00'],
    )
    log: Optional[Dict[str, Any]] = Field(
        None, description='The URLs for logging events.'
    )
    md5: str = Field(
        ...,
        description='The MD5 hash of the video file.',
        examples=['1bc29b36f623ba82aaf6724fd3b16718'],
    )
    size: float = Field(
        ..., description='The file size in bytes of this video.', examples=[5000000]
    )
    type: Type8 = Field(
        ...,
        description='The type of the video file:\n\nOption descriptions:\n * `source` - The video is a source file.\n * `video/mp4` - The video is in MP4 format.\n * `video/webm` - The video is in WebM format.\n * `vp6/x-video` - The video is in VP6 format.\n',
        examples=['source'],
    )
    width: float = Field(
        ..., description='The width in pixels of the video.', examples=[1280]
    )


class Status(Enum):
    playable = 'playable'
    purchase_required = 'purchase_required'
    restricted = 'restricted'
    unavailable = 'unavailable'


class Play(BaseModel):
    progressive: Optional[List[ProgressiveItem]] = Field(
        None, description='Progressive files.'
    )
    status: Status = Field(
        ...,
        description='The play status of the video:\n\nOption descriptions:\n * `playable` - The video is playable.\n * `purchase_required` - The video must be purchased.\n * `restricted` - Playback for the video is restricted.\n * `unavailable` - The video is unavailable.\n',
        examples=['playable'],
    )


class Videos7(BaseModel):
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    total: float = Field(
        ..., description='The total number of videos on this connection.', examples=[18]
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data.',
        examples=['/users/152184/portfolios/12345/videos'],
    )


class Connections12(BaseModel):
    videos: Videos7 = Field(
        ..., description='Information about the videos contained within this portfolio.'
    )


class Metadata12(BaseModel):
    connections: Connections12 = Field(
        ..., description='A list of resource URIs related to the album.'
    )


class Sort1(Enum):
    alphabetical = 'alphabetical'
    clips = 'clips'
    modified = 'modified'
    recent = 'recent'


class Portfolio(BaseModel):
    created_time: str = Field(
        ...,
        description='The time in ISO 8601 format when the portfolio was created.',
        examples=['2017-05-16T19:56:07+00:00'],
    )
    description: str = Field(
        ...,
        description="The portfolio's description.",
        examples=['The Vimeo Staff original productions.'],
    )
    link: str = Field(
        ...,
        description='The link to the portfolio.',
        examples=['https://vimeopro.com/staff/originals'],
    )
    metadata: Metadata12 = Field(..., description='Metadata about the album.')
    modified_time: str = Field(
        ...,
        description="The time in ISO 8601 format when the portfolio's data was last modified.",
        examples=['2017-05-17T19:56:07+00:00'],
    )
    name: str = Field(
        ...,
        description='The display name of the portfolio.',
        examples=['Vimeo Originals!'],
    )
    sort: Sort1 = Field(
        ...,
        description='The default video sort order for the portfolio:\n\nOption descriptions:\n * `alphabetical` - The default sort order is alphabetical by name.\n * `clips` - The default sort order is video creation date.\n * `modified` - The default sort order is the order in which the videos were modified.\n * `recent` - The default sort order is the order in which the videos were added.\n',
        examples=['alphabetical'],
    )
    uri: str = Field(
        ...,
        description='The canonical relative URI of the portfolio.',
        examples=['/users/152184/portfolios/12345'],
    )


class Videos8(BaseModel):
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    total: float = Field(
        ..., description='The total number of videos on this connection.', examples=[13]
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data.',
        examples=['/users/152184/presets/12345/videos'],
    )


class Connections13(BaseModel):
    videos: Videos8 = Field(
        ..., description='Information about the videos in this preset.'
    )


class Metadata13(BaseModel):
    connections: Connections13 = Field(
        ..., description='A list of resource URIs related to the album.'
    )


class Buttons1(BaseModel):
    embed: bool = Field(
        ...,
        description='Whether the preset includes Embed button settings.',
        examples=['true'],
    )
    hd: bool = Field(
        ...,
        description='Whether the preset includes HD button settings.',
        examples=['true'],
    )
    like: bool = Field(
        ...,
        description='Whether the preset includes Like button settings.',
        examples=['true'],
    )
    share: bool = Field(
        ...,
        description='Whether the present includes Share button settings.',
        examples=['true'],
    )
    vote: bool = Field(
        ...,
        description='Whether the preset includes Vote button settings.',
        examples=['true'],
    )
    watchlater: bool = Field(
        ...,
        description='Whether the preset includes Watch Later button settings.',
        examples=['true'],
    )


class Logos1(BaseModel):
    custom: bool = Field(
        ...,
        description='Whether the preset includes custom logo settings.',
        examples=['true'],
    )
    sticky_custom: bool = Field(
        ...,
        description='Whether the present includes sticky custom logo settings.',
        examples=['true'],
    )
    vimeo: bool = Field(
        ...,
        description='Whether the preset includes Vimeo logo settings.',
        examples=['true'],
    )


class Link(BaseModel):
    name: Optional[str] = Field(
        None, description='The name of the outro link.', examples=['Example Outro']
    )
    url: Optional[str] = Field(
        None, description='The URL of the outro link.', examples=['https://example.com']
    )


class Type9(Enum):
    link = 'link'
    no_idea = 'no idea'
    text = 'text'
    uploaded_clips = 'uploaded_clips'
    uploaded_videos = 'uploaded_videos'


class Outro(BaseModel):
    clips: Optional[str] = Field(
        None,
        description='A comma-separated list of video URIs. Present only if the type is `uploaded_clips`.',
        examples=['/videos/258684937,/videos/273576296'],
    )
    link: Optional[Link] = Field(
        None, description='The outro link settings. Present only if the type is `link`.'
    )
    text: Optional[str] = Field(
        None,
        description='The outro text. Present only if the type is `text`.',
        examples=['Lorem ipsum dolor sit amet, consectetur adipiscing elit.'],
    )
    type: Type9 = Field(..., description='The preset outro type:', examples=['link'])
    videos: Optional[str] = Field(
        None,
        description='A comma-separated list of video URIs. Present only if type is `no idea`.',
        examples=['/videos/258684937,/videos/273576296'],
    )


class Settings(BaseModel):
    buttons: Buttons1
    logos: Logos1
    outro: Outro


class Videos9(BaseModel):
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    total: float = Field(
        ..., description='The total number of videos on this connection.', examples=[12]
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data.',
        examples=['/users/152184/projects/12345/videos'],
    )


class Connections14(BaseModel):
    videos: Videos9 = Field(
        ...,
        description='A standard connection object indicating how to get all the videos in this project.',
    )


class Metadata14(BaseModel):
    connections: Connections14 = Field(
        ..., description='A list of resource URIs related to the project.'
    )


class Buy2(BaseModel):
    drm: Optional[bool] = Field(
        None,
        description='Whether the On Demand video for purchase has DRM.',
        examples=['true'],
    )


class Stream(Enum):
    available = 'available'
    purchased = 'purchased'
    restricted = 'restricted'
    unavailable = 'unavailable'


class Subscribe(BaseModel):
    drm: Optional[bool] = Field(
        None,
        description='Whether the On Demand subscription has DRM.',
        examples=['true'],
    )
    expires_time: Optional[str] = Field(
        None,
        description='The time in ISO 8601 format when the On Demand video will expire.',
        examples=['2018-03-05T21:04:47+00:00'],
    )
    link: Optional[str] = Field(
        None,
        description='The URL to purchase this On Demand subscription on Vimeo.',
        examples=['https://vimeo.com/ondemand/darbyforever'],
    )
    purchase_time: Optional[str] = Field(
        None,
        description='The time in ISO 8601 format when the On Demand was purchased.',
        examples=['2018-03-05T21:04:47+00:00'],
    )
    stream: Optional[Stream] = Field(
        None,
        description="The user's streaming access to this On Demand subscription:\n\nOption descriptions:\n * `available` - The On Demand subscription is available for streaming.\n * `purchased` - The On Demand subscription has been purchased.\n * `restricted` - Streaming for the On Demand subscription is restricted.\n * `unavailable` - The On Demand subscription is unavailable.\n",
        examples=['available'],
    )
    uri: Optional[str] = Field(
        None,
        description="The On Demand subscription's product URI.",
        examples=['/ondemand/pages/61326/products/12345'],
    )


class PurchaseInteraction(BaseModel):
    buy: Optional[Buy2] = Field(
        None, description='Information on purchasing this video.'
    )
    rent: Optional[Dict[str, Any]] = Field(
        None, description='Information on renting this video.'
    )
    subscribe: Optional[Subscribe] = Field(
        None, description='Information on subscribing to this video.'
    )


class Videos10(BaseModel):
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    total: float = Field(
        ...,
        description='The total number of videos on this connection.',
        examples=[34371],
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data.',
        examples=['/tags/awesome/videos'],
    )


class Connections15(BaseModel):
    videos: Videos10 = Field(
        ..., description='Information about the videos related to this tag.'
    )


class Metadata15(BaseModel):
    connections: Connections15 = Field(
        ...,
        description='A collection of information that is connected to this resource.',
    )


class Tag(BaseModel):
    canonical: str = Field(
        ..., description='The normalized canonical tag name.', examples=['awesome']
    )
    metadata: Metadata15 = Field(..., description='Metadata about the group.')
    name: str = Field(..., description='The tag value.', examples=['awesome'])
    resource_key: str = Field(
        ...,
        description="The tag's resource key string.",
        examples=['bac1033deba2310ebba2caec33c23e4beea67aba'],
    )
    uri: str = Field(
        ...,
        description='The canonical relative URI of the tag.',
        examples=['/videos/258684937/tags/awesome'],
    )


class Type10(Enum):
    captions = 'captions'
    subtitles = 'subtitles'


class TextTrack(BaseModel):
    active: bool = Field(
        ..., description='Whether this text track is active.', examples=['true']
    )
    hls_link: str = Field(
        ...,
        description='The read-only URL of the text track file, intended for use with HLS playback.',
    )
    hls_link_expires_time: str = Field(
        ...,
        description='The time in ISO 8601 format when the read-only HLS playback text track file expires.',
        examples=['1494888499'],
    )
    language: str = Field(
        ...,
        description='The language code for this text track. To see a full list, request\n`/languages?filter=texttrack`.',
        examples=['en-US'],
    )
    link: str = Field(
        ...,
        description='The read-only URL of the text track file. You can upload to this link when you create it for the first time.',
    )
    link_expires_time: str = Field(
        ...,
        description='The time in ISO 8601 format when the text track link expires.',
        examples=['1494888499'],
    )
    name: str = Field(
        ...,
        description='The descriptive name of this text track.',
        examples=['English Subtitles'],
    )
    type: Type10 = Field(
        ...,
        description='The type of the text track:\n\nOption descriptions:\n * `captions` - The text track is for captions.\n * `subtitles` - The text track is for subtitles.\n',
        examples=['captions'],
    )
    uri: str = Field(
        ...,
        description='The relative URI of the text track.',
        examples=['/videos/258684937/texttracks/12345'],
    )


class Account(Enum):
    basic = 'basic'
    business = 'business'
    live_business = 'live_business'
    live_premium = 'live_premium'
    live_pro = 'live_pro'
    plus = 'plus'
    pro = 'pro'
    pro_unlimited = 'pro_unlimited'
    producer = 'producer'


class ContentFilter(Enum):
    drugs = 'drugs'
    language = 'language'
    nudity = 'nudity'
    safe = 'safe'
    unrated = 'unrated'
    violence = 'violence'


class Albums(BaseModel):
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    total: float = Field(
        ..., description='The total number of albums on this connection.', examples=[3]
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data.',
        examples=['/users/152184/albums'],
    )


class Appearances(BaseModel):
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    total: float = Field(
        ...,
        description='The total number of appearances on this connection.',
        examples=[6],
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data.',
        examples=['/users/152184/appearances'],
    )


class Block(BaseModel):
    options: List[str] = Field(
        ...,
        description='An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.',
    )
    total: float = Field(
        ...,
        description='The total number of blocked users on this connection. This data requires a bearer token with the `private` scope.',
        examples=[73],
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.',
        examples=['/me/block'],
    )


class Categories(BaseModel):
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    total: float = Field(
        ...,
        description='The total number of categories on this connection.',
        examples=[5],
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data.',
        examples=['/users/152184/categories'],
    )


class Channels1(BaseModel):
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    total: float = Field(
        ...,
        description='The total number of channels on this connection.',
        examples=[4],
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data.',
        examples=['/users/152184/channels'],
    )


class Feed(BaseModel):
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data.',
        examples=['/users/152184/feed'],
    )


class Folders(BaseModel):
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    total: float = Field(
        ..., description='The total number of folders on this connection.', examples=[9]
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data.',
        examples=['/me/folders'],
    )


class Followers(BaseModel):
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    total: float = Field(
        ...,
        description='The total number of followers on this connection.',
        examples=[12],
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data.',
        examples=['/users/152184/followers'],
    )


class Following(BaseModel):
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    total: float = Field(
        ..., description='The total number of users on this connection.', examples=[47]
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data.',
        examples=['/users/152184/following'],
    )


class Groups1(BaseModel):
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    total: float = Field(
        ..., description='The total number of groups on this connection.', examples=[2]
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data.',
        examples=['/users/152184/groups'],
    )


class Likes2(BaseModel):
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    total: float = Field(
        ..., description='The total number of likes on this connection.', examples=[300]
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data.',
        examples=['/users/152184/likes'],
    )


class ModeratedChannels(BaseModel):
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    total: float = Field(
        ...,
        description='The total number of channels on this connection.',
        examples=[1],
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data.',
        examples=['/users/152184/channels?filter=moderated'],
    )


class Pictures1(BaseModel):
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    total: float = Field(
        ...,
        description='The total number of pictures on this connection.',
        examples=[3],
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data.',
        examples=['/users/152184/pictures'],
    )


class Portfolios(BaseModel):
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    total: float = Field(
        ...,
        description='The total number of portfolios on this connection.',
        examples=[5],
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data.',
        examples=['/users/152184/portfolios'],
    )


class RecommendedChannels(BaseModel):
    options: List[str] = Field(
        ...,
        description='An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.',
    )
    total: float = Field(
        ...,
        description='The total number of channels on this connection. This data requires a bearer token with the `private` scope.',
        examples=[4],
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.',
        examples=['/me/recommendations/channels'],
    )


class RecommendedUsers(BaseModel):
    options: List[str] = Field(
        ...,
        description='An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.',
    )
    total: float = Field(
        ...,
        description='The total number of users on this connection. This data requires a bearer token with the `private` scope.',
        examples=[6],
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.',
        examples=['/me/recommendations/users'],
    )


class Shared(BaseModel):
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    total: float = Field(
        ..., description='The total number of videos on this connection.', examples=[15]
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data.',
        examples=['/users/152184/shared/videos'],
    )


class Videos11(BaseModel):
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    total: float = Field(
        ..., description='The total number of videos on this connection.', examples=[36]
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data.',
        examples=['/users/152184/videos'],
    )


class WatchedVideos(BaseModel):
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    total: float = Field(
        ...,
        description='The total number of videos on this connection.',
        examples=[322],
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data.',
        examples=['/me/watched/videos'],
    )


class Watchlater1(BaseModel):
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    total: float = Field(
        ..., description='The total number of videos on this connection.', examples=[14]
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data.',
        examples=['/users/152184/watchlater'],
    )


class Connections16(BaseModel):
    albums: Albums = Field(
        ..., description='Information about the albums created by this user.'
    )
    appearances: Appearances = Field(
        ...,
        description='Information about the appearances of this user in other videos.',
    )
    block: Block = Field(
        ...,
        description='Information on the users that the current user has blocked. This data requires a bearer token with the `private` scope.',
    )
    categories: Categories = Field(
        ..., description="Information about this user's followed categories."
    )
    channels: Channels1 = Field(
        ..., description="Information about this user's subscribed channels."
    )
    feed: Feed = Field(..., description="Information about this user's feed.")
    folders: Folders = Field(..., description="Information about this user's folders.")
    followers: Followers = Field(
        ..., description="Information about the user's followers."
    )
    following: Following = Field(
        ...,
        description='Information about the users that the current user is following.',
    )
    groups: Groups1 = Field(
        ..., description='Information about the groups created by this user.'
    )
    likes: Likes2 = Field(
        ..., description='Information about the videos that this user has liked.'
    )
    moderated_channels: ModeratedChannels = Field(
        ..., description='Information about the channels that this user moderates.'
    )
    pictures: Pictures1 = Field(
        ..., description="Information about this user's portraits."
    )
    portfolios: Portfolios = Field(
        ..., description="Information about this user's portfolios."
    )
    recommended_channels: RecommendedChannels = Field(
        ...,
        description='A collection of recommended channels for the current user to follow. This data requires a bearer token with the `private` scope.',
    )
    recommended_users: RecommendedUsers = Field(
        ...,
        description='A Collection of recommended users for the current user to follow. This data requires a bearer token with the `private` scope.',
    )
    shared: Shared = Field(
        ...,
        description='Information about the videos that have been shared with this user.',
    )
    videos: Videos11 = Field(
        ..., description='Information about the videos uploaded by this user.'
    )
    watched_videos: WatchedVideos = Field(
        ..., description='Information about the videos that this user has watched.'
    )
    watchlater: Watchlater1 = Field(
        ...,
        description='Information about the videos that this user wants to watch later.',
    )


class AddPrivacyUser(BaseModel):
    options: Optional[List[str]] = Field(
        None,
        description='An array of the HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.',
    )
    uri: Optional[str] = Field(
        None,
        description='The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.',
        examples=['/channels/152184/privacy/users'],
    )


class Block1(BaseModel):
    added: bool = Field(
        ...,
        description='Whether a user is blocking the current user.',
        examples=['true'],
    )
    added_time: str = Field(
        ...,
        description='The time in ISO 8601 format when the block occurred, or the null value if no block exists.',
        examples=['2017-05-16T15:05:43+00:00'],
    )
    options: List[str] = Field(
        ..., description='An array of the HTTP methods permitted on this URI.'
    )
    uri: str = Field(
        ...,
        description='The URI to block or unblock the user.',
        examples=['/me/block/3766357'],
    )


class Follow2(BaseModel):
    added: bool = Field(
        ...,
        description='Whether a user is following the current user.',
        examples=['true'],
    )
    options: List[str] = Field(
        ..., description='An array of the HTTP methods permitted on this URI.'
    )
    uri: str = Field(
        ...,
        description='The URI to follow the user.',
        examples=['/users/152184/following/3766357'],
    )


class Report(BaseModel):
    options: List[str] = Field(
        ..., description='An array of the HTTP methods permitted on this URI.'
    )
    reason: List[str] = Field(
        ..., description='List of valid reasons for reporting a video.'
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data.',
        examples=['/users/152184/report'],
    )


class Interactions7(BaseModel):
    add_privacy_user: Optional[AddPrivacyUser] = None
    block: Block1 = Field(
        ..., description='Information related to the block status of this user.'
    )
    follow: Follow2 = Field(
        ..., description='Information related to the followed status of this user.'
    )
    report: Report = Field(
        ..., description='Information regarding where and how to report a user.'
    )


class Metadata16(BaseModel):
    connections: Connections16 = Field(
        ..., description='The list of resource URIs related to the user.'
    )
    interactions: Interactions7


class Comments1(Enum):
    anybody = 'anybody'
    contacts = 'contacts'
    nobody = 'nobody'


class Embed1(Enum):
    private = 'private'
    public = 'public'
    whitelist = 'whitelist'


class View3(Enum):
    anybody = 'anybody'
    contacts = 'contacts'
    disable = 'disable'
    nobody = 'nobody'
    password = 'password'
    unlisted = 'unlisted'
    users = 'users'


class Privacy3(BaseModel):
    add: Optional[bool] = Field(
        None,
        description="Whether other users can add the user's videos.",
        examples=['true'],
    )
    comments: Optional[Comments1] = Field(
        None,
        description="The user's privacy preference for comments:\n\nOption descriptions:\n * `anybody` - Anyone can comment on the user's videos.\n * `contacts` - Only contacts can comment on the user's videos.\n * `nobody` - No one can comment on the user's videos.\n",
        examples=['anybody'],
    )
    download: Optional[bool] = Field(
        None,
        description="Whether other users can download the user's videos.",
        examples=['true'],
    )
    embed: Optional[Embed1] = Field(
        None,
        description="The user's privacy preference for embeds:\n\nOption descriptions:\n * `private` - Only the user can embed their own videos.\n * `public` - Anyone can embed the user's videos.\n * `whitelist` - Only those on the whitelist can embed the user's videos.\n",
        examples=['private'],
    )
    view: Optional[View3] = Field(
        None,
        description="The user's privacy preference for views:\n\nOption descriptions:\n * `anybody` - Anyone can view the user's videos.\n * `contacts` - Only contacts can view the user's videos.\n * `disable` - Views are disabled for the user's videos.\n * `nobody` - No one except the user can view the user's videos.\n * `password` - Only those with the password can view the user's videos.\n * `unlisted` - Anybody can view the user's videos if they have a link.\n * `users` - Only other Vimeo members can view the user's videos.\n",
        examples=['anybody'],
    )


class Videos12(BaseModel):
    privacy: Optional[Privacy3] = None


class Preferences(BaseModel):
    videos: Optional[Videos12] = None


class Lifetime(BaseModel):
    free: float = Field(
        ...,
        description='The number of bytes remaining in your lifetime maximum.',
        examples=[5000000],
    )
    max: float = Field(
        ...,
        description='The total number of bytes that you can upload across the lifetime of your account.',
        examples=[5368709120],
    )
    used: float = Field(
        ...,
        description="The number of bytes that you've already uploaded against your lifetime limit.",
        examples=[5368704120],
    )


class Periodic(BaseModel):
    free: float = Field(
        ...,
        description='The number of bytes remaining in your upload quota for the current period.',
        examples=[5000000],
    )
    max: float = Field(
        ...,
        description='The total number of bytes that you can upload per period.',
        examples=[5368709120],
    )
    reset_date: str = Field(
        ...,
        description='The time in ISO 8601 format when your upload quota resets.',
        examples=['2029-03-13T02:35:13-04:00'],
    )
    used: float = Field(
        ...,
        description="The number of bytes that you've already uploaded against your quota in the current period.",
        examples=[5368704120],
    )


class Showing(Enum):
    lifetime = 'lifetime'
    periodic = 'periodic'


class Space(BaseModel):
    free: float = Field(
        ...,
        description='The number of bytes remaining in your upload quota.',
        examples=[5000000],
    )
    max: float = Field(
        ...,
        description='The maximum number of bytes allotted to your upload quota.',
        examples=[5368709120],
    )
    showing: Showing = Field(
        ...,
        description='Whether the values of the upload_quota.space fields are for the lifetime quota or the periodic quota.',
        examples=['lifetime'],
    )
    used: float = Field(
        ...,
        description="The number of bytes that you've already uploaded against your quota.",
        examples=[5368704120],
    )


class UploadQuota(BaseModel):
    lifetime: Lifetime = Field(
        ..., description="Information about the user's lifetime upload usage."
    )
    periodic: Periodic = Field(
        ..., description="Information about the user's usage for the current period."
    )
    space: Space = Field(
        ...,
        description="Information about the user's upload space remaining for the current period.",
    )


class Website(BaseModel):
    description: str = Field(
        ...,
        description="The website's description.",
        examples=['Follow us on Twitter!'],
    )
    link: str = Field(
        ...,
        description='The URL of the website.',
        examples=['https://twitter.com/vimeo'],
    )
    name: str = Field(..., description='The name of the website.', examples=['Twitter'])


class User(BaseModel):
    account: Account = Field(
        ...,
        description="The user's account type:\n\nOption descriptions:\n * `basic` - The user has a Vimeo Basic subscription.\n * `business` - The user has a Vimeo Business subscription.\n * `live_business` - The user has a Vimeo Business Live subscription.\n * `live_premium` - The user has a Vimeo Premium subscription.\n * `live_pro` - The user has a Vimeo PRO Live subscription.\n * `plus` - The user has a Vimeo Plus subscription.\n * `pro` - The user has a Vimeo Pro subscription.\n * `pro_unlimited` - The user has a Vimeo PRO Unlimited subscription.\n * `producer` - The user has a Vimeo Producer subscription.\n",
        examples=['basic'],
    )
    bio: str = Field(
        ...,
        description="The user's bio.",
        examples=[
            'This is where you will find videos and news updates from the staff.'
        ],
    )
    content_filter: Optional[Union[List[str], ContentFilter]] = Field(
        None,
        description="The user's content filters:\n\nOption descriptions:\n * `drugs` - Drugs or alcohol use.\n * `language` - Profanity or sexually suggestive content.\n * `nudity` - Nudity.\n * `safe` - Suitable for all audiences.\n * `unrated` - No rating.\n * `violence` - Violent or graphic content.\n",
        examples=['drugs'],
    )
    created_time: str = Field(
        ...,
        description='The time in ISO 8601 format when the user account was created.',
        examples=['2007-01-18T16:40:11+00:00'],
    )
    email: Optional[str] = Field(
        None,
        description="The user's email address. This data requires a bearer token with the `email` scope.",
        examples=['user@example.com'],
    )
    link: str = Field(
        ...,
        description="The absolute URL of this user's profile page.",
        examples=['https://vimeo.com/staff'],
    )
    location: str = Field(
        ..., description="The user's location.", examples=['New York City']
    )
    metadata: Metadata16 = Field(..., description="The user's metadata.")
    name: str = Field(
        ..., description="The user's display name.", examples=['Vimeo Staff']
    )
    pictures: Picture = Field(..., description='The active portrait of this user.')
    preferences: Optional[Preferences] = None
    resource_key: str = Field(
        ...,
        description="The user's resource key string.",
        examples=['bac1033deba2310ebba2caec33c23e4beea67aba'],
    )
    upload_quota: UploadQuota = Field(
        ...,
        description='Appears only when the user has upload access and is looking at their own user record.',
    )
    uri: str = Field(
        ...,
        description="The user's canonical relative URI.",
        examples=['/users/152184'],
    )
    websites: List[Website] = Field(..., description="The user's websites.")


class Action(Enum):
    Added_to = 'Added to'
    Appearance_by = 'Appearance by'
    Liked_by = 'Liked by'
    Uploaded_by = 'Uploaded by'


class Context(BaseModel):
    action: Action = Field(
        ...,
        description='The contextual action:\n\nOption descriptions:\n * `Added to` - An Added To action.\n * `Appearance by` - An Appearance By action.\n * `Liked by` - A Liked By action.\n * `Uploaded by` - An Unloaded By action.\n',
        examples=['Added to'],
    )
    resource: Dict[str, Any] = Field(
        ...,
        description='The contextual resource: a user, group, or channel representation, or an object of a tag.',
    )
    resource_type: str = Field(
        ..., description='The contextual resource type.', examples=['clip']
    )


class License(Enum):
    by = 'by'
    by_nc = 'by-nc'
    by_nc_nd = 'by-nc-nd'
    by_nc_sa = 'by-nc-sa'
    by_nd = 'by-nd'
    by_sa = 'by-sa'
    cc0 = 'cc0'


class Comments2(BaseModel):
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    total: float = Field(
        ...,
        description='The total number of comments on this connection.',
        examples=[14],
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data.',
        examples=['/videos/258684937/comments'],
    )


class Credits(BaseModel):
    options: Optional[List[str]] = Field(
        None, description='An array of HTTP methods permitted on this URI.'
    )
    total: Optional[float] = Field(
        None, description='The total number of users on this connection.', examples=[4]
    )
    uri: Optional[str] = Field(
        None,
        description='The API URI that resolves to the connection data.',
        examples=['/videos/258684937/credits'],
    )


class Likes3(BaseModel):
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    total: float = Field(
        ..., description='The total number of likes on this connection.', examples=[230]
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data.',
        examples=['/videos/258684937/likes'],
    )


class Ondemand(BaseModel):
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    resource_key: str = Field(
        ...,
        description='The On Demand connection resource key.',
        examples=['bac1033deba2310ebba2caec33c23e4beea67aba'],
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data.',
        examples=['/ondemand/pages/61326'],
    )


class Pictures2(BaseModel):
    options: List[str] = Field(
        ..., description='An array of HTTP methods allowed on this URI.'
    )
    total: float = Field(
        ..., description='Total number of thumbnails on this connection.', examples=[1]
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data.',
        examples=['/videos/258684937/pictures'],
    )


class Playback(BaseModel):
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data.',
        examples=['/videos/258684937/playback'],
    )


class Recommendations(BaseModel):
    options: Optional[List[str]] = Field(
        None, description='An array of HTTP methods allowed on this URI.'
    )
    uri: Optional[str] = Field(
        None,
        description='The API URI that resolves to the connection data.',
        examples=['/videos/258684937/recommendations'],
    )


class Related1(BaseModel):
    options: Optional[List[str]] = Field(
        None, description='An array of HTTP methods allowed on this URI.'
    )
    uri: Optional[str] = Field(
        None,
        description='The API URI that resolves to the connection data.',
        examples=['/videos/258684937?offset=10'],
    )


class Season1(BaseModel):
    name: str = Field(
        ..., description='The name of this season.', examples=['Season 1']
    )
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data.',
        examples=['/ondemand/pages/61326/season/12345'],
    )


class Texttracks(BaseModel):
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    total: float = Field(
        ...,
        description='The total number of text tracks on this connection.',
        examples=[2],
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data.',
        examples=['/videos/258684937/texttracks'],
    )


class Trailer(BaseModel):
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    resource_key: str = Field(
        ...,
        description='The trailer connection resource key.',
        examples=['bac1033deba2310ebba2caec33c23e4beea67aba'],
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data.',
        examples=['/ondemand/pages/61326/videos/12345'],
    )


class UsersWithAccess(BaseModel):
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    total: float = Field(
        ..., description='The total number of users on this connection.', examples=[8]
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data.',
        examples=['/videos/258684937/privacy/users'],
    )


class Versions(BaseModel):
    current_uri: Optional[str] = Field(
        None,
        description='The URI of the current version of the video.',
        examples=['/videos/258684937/versions/12345'],
    )
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    total: float = Field(
        ...,
        description='The total number of versions on this connection.',
        examples=[3],
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data.',
        examples=['/videos/258684937/versions'],
    )


class Connections17(BaseModel):
    comments: Comments2 = Field(
        ..., description='Information about the comments on this video.'
    )
    credits: Credits = Field(
        ..., description='Information about the users credited in this video.'
    )
    likes: Likes3 = Field(
        ..., description='Information about the users who have liked this video.'
    )
    ondemand: Ondemand = Field(
        ..., description="Information about this video's ondemand data."
    )
    pictures: Pictures2 = Field(
        ..., description="Information about this video's thumbnails."
    )
    playback: Playback = Field(
        ..., description='The DRM playback status connection for this video.'
    )
    recommendations: Recommendations = Field(
        ..., description='The recommendations for this video.'
    )
    related: Related1 = Field(..., description='Related content for this video.')
    season: Season1 = Field(..., description="Information about the video's season.")
    texttracks: Texttracks = Field(
        ..., description="Information about this video's text tracks."
    )
    trailer: Trailer = Field(
        ..., description="Information about this video's VOD trailer."
    )
    users_with_access: UsersWithAccess = Field(
        ...,
        description='Information about the user privacy of this video, if the video privacy is `users`.',
    )
    versions: Versions = Field(
        ..., description='Information about the versions of this video.'
    )


class Download(Enum):
    available = 'available'
    purchased = 'purchased'
    restricted = 'restricted'
    unavailable = 'unavailable'


class Buy3(BaseModel):
    currency: str = Field(
        ...,
        description="The currency code for the current user's region.",
        examples=['USD'],
    )
    display_price: str = Field(
        ...,
        description='Formatted price to display to buy an On Demand video.',
        examples=['5.99'],
    )
    download: Download = Field(
        ...,
        description="The user's download access to this On Demand video:\n\nOption descriptions:\n * `available` - The video is available for download.\n * `purchased` - The user has purchased the video.\n * `restricted` - The user isn't permitted to download the video.\n * `unavailable` - The video isn't available for download.\n",
        examples=['available'],
    )
    drm: bool = Field(..., description='Whether the video has DRM.', examples=['true'])
    link: str = Field(
        ...,
        description='The URL to buy the On Demand video on Vimeo.',
        examples=['https://vimeo.com/ondemand/darbyforever'],
    )
    price: float = Field(
        ...,
        description='The numeric value of the price for buying the On Demand video.',
        examples=[5.99],
    )
    purchase_time: str = Field(
        ...,
        description='The time in ISO 8601 format when the On Demand video was purchased.',
        examples=['2018-03-05T21:04:47+00:00'],
    )
    stream: Stream = Field(
        ...,
        description="The user's streaming access to this On Demand video:\n\nOption descriptions:\n * `available` - The video is available for streaming.\n * `purchased` - The user has purchased the video.\n * `restricted` - The user isn't permitted to stream the video.\n * `unavailable` - The video isn't available for streaming\n",
        examples=['available'],
    )
    uri: str = Field(
        ...,
        description='The product URI to purchase the On Demand video.',
        examples=['/ondemand/pages/61326/products/12345'],
    )


class Channel1(BaseModel):
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    uri: str = Field(
        ..., description='The API URI that resolves to the connection data.'
    )


class Like(BaseModel):
    added: bool = Field(
        ..., description='Whether the user has liked the video.', examples=['true']
    )
    added_time: str = Field(
        ..., description='The time in ISO 8601 format when the user liked the video.'
    )
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    uri: str = Field(
        ..., description='The API URI that resolves to the connection data.'
    )


class Rent2(BaseModel):
    currency: str = Field(
        ...,
        description="The currency code for the current user's region.",
        examples=['USD'],
    )
    display_price: str = Field(
        ...,
        description='Formatted price to display to rent an On Demand video.',
        examples=['5.99'],
    )
    drm: bool = Field(..., description='Whether the video has DRM.', examples=['true'])
    expires_time: str = Field(
        ...,
        description='The time in ISO 8601 format when the rental period for the video expires.',
        examples=['2018-03-05T21:04:47+00:00'],
    )
    link: str = Field(
        ...,
        description='The URL to rent the On Demand video on Vimeo.',
        examples=['https://vimeo.com/ondemand/darbyforever'],
    )
    price: float = Field(
        ...,
        description='The numeric value of the price for buying the On Demand video.',
        examples=[5.99],
    )
    purchase_time: str = Field(
        ...,
        description='The time in ISO 8601 format when the On Demand video was rented.',
        examples=['2018-09-16T09:02:40+00:00'],
    )
    stream: Stream = Field(
        ...,
        description="The user's streaming access to this On Demand video:\n\nOption descriptions:\n * `available` - The video is available for streaming.\n * `purchased` - The user has purchased the video.\n * `restricted` - The user isn't permitted to stream the video.\n * `unavailable` - The video isn't available for streaming.\n",
        examples=['available'],
    )
    uri: str = Field(
        ...,
        description='The product URI to rent the On Demand video.',
        examples=['/ondemand/pages/61326/products/12345'],
    )


class Report1(BaseModel):
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    reason: List[str] = Field(
        ..., description='A list of valid reasons for reporting a video.'
    )
    uri: str = Field(
        ..., description='The API URI that resolves to the connection data.'
    )


class Subscribe1(BaseModel):
    drm: Optional[bool] = Field(
        None, description='Whether the video has DRM.', examples=['true']
    )
    expires_time: Optional[str] = Field(
        None,
        description='The time in ISO 8601 format when the subscription expires.',
        examples=['2018-03-05T21:04:47+00:00'],
    )
    purchase_time: Optional[str] = Field(
        None,
        description='The tine in ISO 8601 format when the subscription was purchased.',
        examples=['2018-03-02T21:04:47+00:00'],
    )
    stream: Optional[str] = Field(
        None, description='The stream type.', examples=['purchased']
    )


class Watched(BaseModel):
    added: bool = Field(
        ..., description='Whether the user has watched the video.', examples=['true']
    )
    added_time: str = Field(
        ..., description='The time in ISO 8601 format when the user watched the video.'
    )
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    uri: str = Field(
        ..., description='The API URI that resolves to the connection data.'
    )


class Watchlater2(BaseModel):
    added: bool = Field(
        ...,
        description='Whether the user has added the video to their Watch later list.',
        examples=['true'],
    )
    added_time: str = Field(
        ...,
        description='The time in ISO 8601 format when the user added the video to their Watch Later list.',
    )
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    uri: str = Field(
        ..., description='The API URI that resolves to the connection data.'
    )


class Interactions8(BaseModel):
    buy: Buy3 = Field(..., description='The Buy interaction for a On Demand video.')
    channel: Channel1 = Field(
        ...,
        description='When a video is referenced by a channel URI, if the user is a moderator of the channel, include information about removing the video from the channel.',
    )
    like: Like = Field(
        ...,
        description='Information about whether the authenticated user has liked this video.',
    )
    rent: Rent2 = Field(..., description='The Rent interaction for an On Demand video.')
    report: Report1 = Field(
        ..., description='Information about where and how to report a video.'
    )
    subscribe: Optional[Subscribe1] = Field(
        None, description='Subscription information for an On Demand video.'
    )
    watched: Watched = Field(
        ...,
        description="Information about removing this video from the user's list of watched videos.",
    )
    watchlater: Watchlater2 = Field(
        ...,
        description="Information about whether this video appears on the authenticated user's Watch Later list.",
    )


class Metadata17(BaseModel):
    connections: Connections17 = Field(
        ..., description='A list of resource URIs related to the video.'
    )
    interactions: Interactions8 = Field(
        ..., description='A list of resource URIs related to the video.'
    )


class Comments3(Enum):
    anybody = 'anybody'
    contacts = 'contacts'
    nobody = 'nobody'


class Embed2(Enum):
    private = 'private'
    public = 'public'


class Privacy4(BaseModel):
    add: bool = Field(
        ...,
        description='Whether the video can be added to collections.',
        examples=['true'],
    )
    comments: Comments3 = Field(
        ...,
        description='Who can comment on the video:\n\nOption descriptions:\n * `anybody` - Anyone can comment on the video.\n * `contacts` - Only contacts can comment on the video.\n * `nobody` - No one can comment on the video.\n',
        examples=['anybody'],
    )
    download: bool = Field(
        ..., description="The video's download permission setting.", examples=['true']
    )
    embed: Embed2 = Field(
        ...,
        description="The video's embed permission setting:\n\nOption descriptions:\n * `private` - The video is private.\n * `public` - Anyone can embed the video.\n",
        examples=['private'],
    )
    view: View3 = Field(
        ...,
        description="The general privacy setting for the video:\n\nOption descriptions:\n * `anybody` - Anyone can view the video.\n * `contacts` - Only contacts can view the video.\n * `disable` - Hide from vimeo\n * `nobody` - No one besides the owner can view the video.\n * `password` - Anyone with the video's password can view the video.\n * `unlisted` - Not searchable from vimeo.com\n * `users` - Only people with a Vimeo account can view the video.\n",
        examples=['anybody'],
    )


class DirectorTimelineItem(BaseModel):
    pitch: Optional[float] = Field(
        None,
        description='The director timeline pitch, from -90 (minimum) to 90 (maximum).',
        examples=[70],
    )
    roll: Optional[float] = Field(
        None, description='The director timeline roll.', examples=[0]
    )
    time_code: Optional[float] = Field(
        None, description='The director timeline time code.', examples=[300]
    )
    yaw: Optional[float] = Field(
        None,
        description='The director timeline yaw, from 0 (minimum) to 360 (maximum).',
        examples=[125],
    )


class Projection(Enum):
    cubical = 'cubical'
    cylindrical = 'cylindrical'
    dome = 'dome'
    equirectangular = 'equirectangular'
    pyramid = 'pyramid'


class StereoFormat(Enum):
    left_right = 'left-right'
    mono = 'mono'
    top_bottom = 'top-bottom'


class Spatial(BaseModel):
    director_timeline: List[DirectorTimelineItem] = Field(
        ..., description='360 director timeline.'
    )
    field_of_view: float = Field(
        ...,
        description='The 360 field of view, from 30 (minimum) to 90 (maximum). The default is 50.',
        examples=[50],
    )
    projection: Projection = Field(
        ...,
        description='The 360 spatial projection:\n\nOption descriptions:\n * `cubical` - The spatial projection is cubical.\n * `cylindrical` - The spatial projection is cylindrical.\n * `dome` - The spatial projection is dome-shaped.\n * `equirectangular` - The spatial projection is equirectangular.\n * `pyramid` - The spatial projection is pyramid-shaped.\n',
        examples=['cubical'],
    )
    stereo_format: StereoFormat = Field(
        ...,
        description='The 360 stereo format:\n\nOption descriptions:\n * `left-right` - The stereo format is left-right.\n * `mono` - The audio is monaural.\n * `top-bottom` - The stereo format is top-bottom.\n',
        examples=['left-right'],
    )


class Stats(BaseModel):
    plays: float = Field(
        ...,
        description='The current total number of times that the video has been played.',
        examples=[20],
    )


class Status1(Enum):
    available = 'available'
    quota_exceeded = 'quota_exceeded'
    total_cap_exceeded = 'total_cap_exceeded'
    transcode_starting = 'transcode_starting'
    transcoding = 'transcoding'
    transcoding_error = 'transcoding_error'
    unavailable = 'unavailable'
    uploading = 'uploading'
    uploading_error = 'uploading_error'


class Status2(Enum):
    complete = 'complete'
    error = 'error'
    in_progress = 'in_progress'


class Transcode(BaseModel):
    status: Optional[Status2] = Field(
        None,
        description="Status code for this video's availability.",
        examples=['complete'],
    )


class Approach(Enum):
    post = 'post'
    pull = 'pull'
    streaming = 'streaming'
    tus = 'tus'


class Upload(BaseModel):
    approach: Optional[Approach] = Field(
        None, description='The approach for uploading the video.', examples=['post']
    )
    complete_uri: Optional[str] = Field(
        None, description='The URI for completing the upload.'
    )
    form: Optional[str] = Field(
        None,
        description='The HTML form for uploading a video through the post approach.',
    )
    link: Optional[str] = Field(
        None, description='The link of the video to capture through the pull approach.'
    )
    redirect_url: Optional[str] = Field(
        None, description='The redirect URL for the upload app.'
    )
    size: Optional[float] = Field(
        None,
        description='The file size in bytes of the uploaded video.',
        examples=[60000],
    )
    status: Status2 = Field(
        ...,
        description='The status code for the availability of the uploaded video:\n\nOption descriptions:\n * `complete` - The upload is complete.\n * `error` - The upload ended with an error.\n * `in_progress` - The upload is underway.\n',
        examples=['complete'],
    )
    upload_link: Optional[str] = Field(
        None, description='The link for sending video file data.'
    )


class Video1(BaseModel):
    options: List[str] = Field(
        ..., description='An array of HTTP methods permitted on this URI.'
    )
    total: float = Field(
        ..., description='The total number of videos on this connection.', examples=[5]
    )
    uri: str = Field(
        ...,
        description='The API URI that resolves to the connection data.',
        examples=['/videos/258684937'],
    )


class Connections18(BaseModel):
    video: Video1 = Field(..., description='Data from video associated with version')


class Metadata18(BaseModel):
    connections: Connections18


class Upload1(BaseModel):
    approach: Optional[Approach] = Field(
        None, description='The approach for uploading the video.', examples=['post']
    )
    complete_uri: Optional[str] = Field(
        None, description='The URI for completing the upload.'
    )
    form: Optional[str] = Field(
        None,
        description='The HTML form for uploading a video through the post approach.',
    )
    link: Optional[str] = Field(
        None, description='The link of the video to capture through the pull approach.'
    )
    redirect_url: Optional[str] = Field(
        None, description='The redirect URL for the upload app.'
    )
    size: Optional[float] = Field(
        None,
        description='The file size in bytes of the uploaded video.',
        examples=[60000],
    )
    status: Status2 = Field(
        ...,
        description='The status code for the availability of the uploaded video:\n\nOption descriptions:\n * `complete` - The upload is complete.\n * `error` - The upload ended with an error.\n * `in_progress` - The upload is underway.\n',
        examples=['complete'],
    )
    upload_link: Optional[str] = Field(
        None, description='The link for sending video file data.'
    )


class VideoVersions(BaseModel):
    active: bool = Field(
        ...,
        description='Whether this video version is the currently active one.',
        examples=['true'],
    )
    app: ApiApp = Field(
        ..., description='The API app associated with the video version.'
    )
    created_time: str = Field(
        ...,
        description='The time in ISO 8601 for when the video version was created.',
        examples=['2018-03-05T21:04:47+00:00'],
    )
    duration: float = Field(
        ..., description='The duration of the video version in seconds.', examples=[81]
    )
    filename: str = Field(
        ..., description='The file name of the video version.', examples=['rev2.mp4']
    )
    filesize: float = Field(
        ...,
        description='The size in byes of the video version file.',
        examples=[4025322521],
    )
    metadata: Metadata18 = Field(..., description="The video version's metadata.")
    modified_time: str = Field(
        ...,
        description='The time in ISO 8601 format when the video version was last modified.',
        examples=['2018-09-16T09:02:40+00:00'],
    )
    play: Play = Field(..., description='The Play representation.')
    upload: Upload1 = Field(..., description='The upload information for this version.')
    upload_date: str = Field(
        ...,
        description='The time in ISO 8601 format when the video version was uploaded.',
        examples=['2018-09-16T09:02:40+00:00'],
    )
    uri: str = Field(
        ...,
        description="The version's canonical relative URI.",
        examples=['/videos/258684937/versions/12345'],
    )
    user: User = Field(..., description='The owner of the video version.')


class Direction(Enum):
    asc = 'asc'
    desc = 'desc'


class Sort2(Enum):
    last_video_featured_time = 'last_video_featured_time'
    name = 'name'


class Sort4(Enum):
    alphabetical = 'alphabetical'
    date = 'date'
    followers = 'followers'
    videos = 'videos'


class Sort6(Enum):
    alphabetical = 'alphabetical'
    date = 'date'
    members = 'members'
    videos = 'videos'


class Filter(Enum):
    conditional_featured = 'conditional_featured'
    embeddable = 'embeddable'


class Sort8(Enum):
    alphabetical = 'alphabetical'
    comments = 'comments'
    date = 'date'
    duration = 'duration'
    featured = 'featured'
    likes = 'likes'
    plays = 'plays'
    relevant = 'relevant'


class Filter2(Enum):
    featured = 'featured'


class Sort10(Enum):
    alphabetical = 'alphabetical'
    date = 'date'
    followers = 'followers'
    relevant = 'relevant'
    videos = 'videos'


class Privacy5(Enum):
    anybody = 'anybody'
    moderators = 'moderators'
    user = 'user'


class ChannelsPostRequest(BaseModel):
    description: Optional[str] = Field(
        None,
        description='The description of the channel.',
        examples=[
            'We really love videos, and these are the videos we really, really love.'
        ],
    )
    link: Optional[str] = Field(
        None,
        description='The link to access the channel. You can use a custom name in the URL in place of a numeric channel ID, as in `/channels/{url_custom}`.',
        examples=['staffpicks'],
    )
    name: str = Field(
        ..., description='The name of the channel.', examples=['Vimeo Staff Picks']
    )
    privacy: Privacy5 = Field(..., description='The privacy level of the channel.')


class Privacy6(Enum):
    anybody = 'anybody'
    moderators = 'moderators'
    users = 'users'


class ChannelsChannelIdPatchRequest(BaseModel):
    description: Optional[str] = Field(
        None,
        description='The description of the channel.',
        examples=[
            'We really love videos, and these are the videos we really, really love.'
        ],
    )
    link: Optional[str] = Field(
        None,
        description='The link to access the channel. You can use a custom name in the URL in place of a numeric channel ID, as in `/channels/{url_custom}`. Submitting `""` for this field removes the link alias.',
        examples=['staffpicks'],
    )
    name: Optional[str] = Field(
        None, description='The name of the channel.', examples=['Vimeo Staff Picks']
    )
    privacy: Optional[Privacy6] = Field(
        None, description='The privacy level of the channel.'
    )


class ChannelsChannelIdCategoriesPutRequest(BaseModel):
    channels: List[str] = Field(..., description='The array of category URIs to add.')


class ChannelsChannelIdModeratorsDeleteRequest(BaseModel):
    user_uri: str = Field(
        ...,
        description='The URI of a user to remove as a moderator.',
        examples=['/users/152184'],
    )


class Sort12(Enum):
    alphabetical = 'alphabetical'
    date = 'date'


class ChannelsChannelIdModeratorsGetResponse(RootModel[List[User]]):
    root: List[User]


class ChannelsChannelIdModeratorsPatchRequest(BaseModel):
    user_uri: str = Field(
        ...,
        description='The URI of the user to add as a moderator.',
        examples=['/users/152184'],
    )


class ChannelsChannelIdModeratorsPatchResponse(RootModel[List[User]]):
    root: List[User]


class ChannelsChannelIdModeratorsPutRequest(BaseModel):
    user_uri: str = Field(
        ...,
        description='The URI of a user to add as a moderator.',
        examples=['/users/152184'],
    )


class ChannelsChannelIdPrivacyUsersGetResponse(RootModel[List[User]]):
    root: List[User]


class ChannelsChannelIdPrivacyUsersPutRequest(BaseModel):
    users: List[str] = Field(
        ...,
        description='The array of either the user URIs or the user IDs to permit to view the private channel.',
    )


class ChannelsChannelIdPrivacyUsersPutResponse(RootModel[List[User]]):
    root: List[User]


class ChannelsChannelIdTagsGetResponse(RootModel[List[Tag]]):
    root: List[Tag]


class ChannelsChannelIdTagsPutRequest(BaseModel):
    tag: List[str] = Field(..., description='An array of tags to assign.')


class ChannelsChannelIdTagsPutResponse(RootModel[List[Tag]]):
    root: List[Tag]


class Filter4(Enum):
    moderators = 'moderators'


class ChannelsChannelIdUsersGetResponse(RootModel[List[User]]):
    root: List[User]


class ChannelsChannelIdVideosDeleteRequest(BaseModel):
    video_uri: str = Field(
        ..., description='The URI of a video to remove.', examples=['/videos/258684937']
    )


class Filter6(Enum):
    embeddable = 'embeddable'


class Sort16(Enum):
    added = 'added'
    alphabetical = 'alphabetical'
    comments = 'comments'
    date = 'date'
    default = 'default'
    duration = 'duration'
    likes = 'likes'
    manual = 'manual'
    modified_time = 'modified_time'
    plays = 'plays'


class ChannelsChannelIdVideosPutRequest(BaseModel):
    video_uri: str = Field(
        ..., description='The URI of a video to add.', examples=['/videos/258684937']
    )


class ChannelsChannelIdVideosVideoIdCommentsPostRequest(BaseModel):
    text: str = Field(
        ..., description='The text of the comment.', examples=['I love this!']
    )


class Sort18(Enum):
    alphabetical = 'alphabetical'
    date = 'date'


class ChannelsChannelIdVideosVideoIdCreditsPostRequest(BaseModel):
    email: str = Field(
        ...,
        description='The email address of the credited person.',
        examples=['user@example.com'],
    )
    name: str = Field(
        ..., description='The name of the credited person.', examples=['Sam Doe']
    )
    role: str = Field(
        ..., description='The role of the credited person.', examples=['Producer']
    )
    user_uri: str = Field(
        ...,
        description='The URI of the Vimeo user who should be given credit in this video.',
        examples=['/users/152184'],
    )


class ChannelsChannelIdVideosVideoIdLikesGetResponse(RootModel[List[User]]):
    root: List[User]


class ChannelsChannelIdVideosVideoIdPicturesGetResponse(RootModel[List[Picture]]):
    root: List[Picture]


class ChannelsChannelIdVideosVideoIdPicturesPostRequest(BaseModel):
    active: Optional[bool] = Field(
        None,
        description='Whether the image created by the `time` field should be the default thumbnail for the video.',
        examples=['true'],
    )
    time: Optional[float] = Field(
        None,
        description='Creates an image of the video from the given time offset.',
        examples=[300],
    )


class ChannelsChannelIdVideosVideoIdPrivacyUsersGetResponse(RootModel[List[User]]):
    root: List[User]


class ChannelsChannelIdVideosVideoIdPrivacyUsersPutResponse(RootModel[List[User]]):
    root: List[User]


class ChannelsChannelIdVideosVideoIdTexttracksGetResponse(RootModel[List[TextTrack]]):
    root: List[TextTrack]


class Type11(Enum):
    captions = 'captions'
    chapters = 'chapters'
    descriptions = 'descriptions'
    metadata = 'metadata'
    subtitles = 'subtitles'


class ChannelsChannelIdVideosVideoIdTexttracksPostRequest(BaseModel):
    active: Optional[bool] = Field(
        None,
        description='Active text tracks appear in the player and are visible to other users. Only one text track per language can be active.',
        examples=['true'],
    )
    language: str = Field(
        ...,
        description='The language of the text track. For a complete list of valid languages, use the [/languages?filter=texttracks](https://developer.vimeo.com/api/endpoints/videos#GET/languages) endpoint.',
        examples=['en-US'],
    )
    name: str = Field(
        ..., description='The name of the text track.', examples=['Commentary']
    )
    type: Type11 = Field(..., description='The type of the text track.')


class ContentratingsGetResponse(RootModel[List[ContentRating]]):
    root: List[ContentRating]


class CreativecommonsGetResponse(RootModel[List[CreativeCommons]]):
    root: List[CreativeCommons]


class Filter8(Enum):
    featured = 'featured'


class Sort22(Enum):
    alphabetical = 'alphabetical'
    date = 'date'
    followers = 'followers'
    relevant = 'relevant'
    videos = 'videos'


class GroupsPostRequest(BaseModel):
    description: Optional[str] = Field(
        None,
        description='The description of the new group.',
        examples=[
            'Want to participate in our weekly Challenges? Join the Group to receive messages and new Challenges!'
        ],
    )
    name: str = Field(
        ...,
        description='The name of the new group.',
        examples=['Vimeo Weekend Challenge'],
    )


class Filter10(Enum):
    moderators = 'moderators'


class Sort24(Enum):
    alphabetical = 'alphabetical'
    date = 'date'


class GroupsGroupIdUsersGetResponse(RootModel[List[User]]):
    root: List[User]


class Filter12(Enum):
    embeddable = 'embeddable'


class Sort26(Enum):
    alphabetical = 'alphabetical'
    comments = 'comments'
    date = 'date'
    duration = 'duration'
    likes = 'likes'
    plays = 'plays'


class Filter14(Enum):
    texttracks = 'texttracks'


class LanguagesGetResponse(RootModel[List[Language]]):
    root: List[Language]


class Embed3(Enum):
    private = 'private'
    public = 'public'
    whitelist = 'whitelist'


class Privacy7(BaseModel):
    add: Optional[bool] = Field(
        None,
        description='Whether a user can add the video to an album, channel, or group. This value becomes the default add setting for all future videos uploaded by the user.',
        examples=['true'],
    )
    comments: Optional[Comments3] = Field(
        None,
        description='Who can comment on the video. This value becomes the default comment setting for all future videos that this user uploads.',
    )
    download: Optional[bool] = Field(
        None,
        description='Whether a user can download the video. This value becomes the default download setting for all future videos that this user uploads.',
        examples=['true'],
    )
    embed: Optional[Embed3] = Field(
        None,
        description='The privacy for embed videos. The `whitelist` value enables you to define all valid embed domains. See our [documentation](https://developer.vimeo.com/api/endpoints/videos#/{video_id}/privacy/domains) for adding and removing domains.',
    )
    view: Optional[View3] = Field(
        None,
        description='Who can view the video. This value becomes the default view setting for all future videos that this user uploads.',
    )


class Videos13(BaseModel):
    privacy: Optional[Privacy7] = None


class MePatchRequest(BaseModel):
    bio: Optional[str] = Field(
        None,
        description="The user's bio.",
        examples=['This is where you will find videos and news updates from the staff'],
    )
    content_filter: Optional[List[str]] = Field(
        None,
        description='A list of values describing the content in this video. Find the full list in the [/contentratings](https://developer.vimeo.com/api/endpoints/videos#GET/contentratings) endpoint. You must provide a comma-separated list if you are using a query string or an array if you are using JSON.',
    )
    link: Optional[str] = Field(
        None, description="The user's custom Vimeo URL slug.", examples=['staff']
    )
    location: Optional[str] = Field(
        None, description="The user's location.", examples=['New York City']
    )
    name: Optional[str] = Field(
        None, description="The user's display name.", examples=['Vimeo Staff']
    )
    password: Optional[str] = Field(
        None,
        description='The default password for all future videos that this user uploads. To use this field, the `videos.privacy.view` field must be `password`.',
        examples=['hunter1'],
    )
    videos: Optional[Videos13] = None


class Sort28(Enum):
    alphabetical = 'alphabetical'
    date = 'date'
    duration = 'duration'
    videos = 'videos'


class Privacy8(Enum):
    anybody = 'anybody'
    embed_only = 'embed_only'
    password = 'password'


class Sort30(Enum):
    added_first = 'added_first'
    added_last = 'added_last'
    alphabetical = 'alphabetical'
    arranged = 'arranged'
    comments = 'comments'
    likes = 'likes'
    newest = 'newest'
    oldest = 'oldest'
    plays = 'plays'


class MeAlbumsPostRequest(BaseModel):
    brand_color: Optional[str] = Field(
        None,
        description='The hexadecimal code for the color of the player buttons.',
        examples=['ff66ee'],
    )
    description: Optional[str] = Field(
        None,
        description='The description of the album.',
        examples=['Vimeo holiday videos!'],
    )
    hide_nav: Optional[bool] = Field(
        None,
        description='Whether to hide Vimeo navigation when displaying the album.',
        examples=['true'],
    )
    layout: Optional[Layout] = Field(
        None, description='The type of layout for presenting the album.'
    )
    name: str = Field(
        ..., description='The name of the album.', examples=['Vimeo Holiday Videos!']
    )
    password: Optional[str] = Field(
        None,
        description="The album's password. Required only if **privacy** is `password`.",
        examples=['hunter1'],
    )
    privacy: Optional[Privacy8] = Field(
        None, description='The privacy level of the album.'
    )
    review_mode: Optional[bool] = Field(
        None,
        description='Whether album videos should use the review mode URL.',
        examples=['true'],
    )
    sort: Optional[Sort30] = Field(
        None, description="The default sort order of the album's videos."
    )
    theme: Optional[Theme] = Field(None, description='The color theme of the album.')


class MeAlbumsAlbumIdPatchRequest(BaseModel):
    brand_color: Optional[str] = Field(
        None,
        description='The hexadecimal code for the color of the player buttons.',
        examples=['ff66ee'],
    )
    description: Optional[str] = Field(
        None,
        description='The description of the album.',
        examples=['Vimeo holiday videos!'],
    )
    domain: Optional[str] = Field(
        None,
        description='The custom domain a user has selected for their album.',
        examples=['mycustomdomain.com'],
    )
    hide_nav: Optional[bool] = Field(
        None,
        description='Whether to hide Vimeo navigation when displaying the album.',
        examples=['true'],
    )
    layout: Optional[Layout] = Field(
        None, description='The type of layout for presenting the album.'
    )
    name: Optional[str] = Field(
        None, description='The name of the album.', examples=['Vimeo Holiday Videos!']
    )
    password: Optional[str] = Field(
        None,
        description="The album's password. Required only if **privacy** is `password`.",
        examples=['hunter1'],
    )
    privacy: Optional[Privacy8] = Field(
        None, description='The privacy level of the album.'
    )
    review_mode: Optional[bool] = Field(
        None,
        description='Whether album videos should use the review mode URL.',
        examples=['true'],
    )
    sort: Optional[Sort30] = Field(
        None, description="The default sort order of the album's videos."
    )
    theme: Optional[Theme] = Field(None, description='The color theme of the album.')
    url: Optional[str] = Field(
        None,
        description='The custom Vimeo URL a user has selected for their album.',
        examples=['my-custom-url'],
    )
    use_custom_domain: Optional[bool] = Field(
        None,
        description='Whether the user has opted in to use a custom domain for their album.',
        examples=['true'],
    )


class Filter16(Enum):
    embeddable = 'embeddable'


class Sort32(Enum):
    alphabetical = 'alphabetical'
    comments = 'comments'
    date = 'date'
    default = 'default'
    duration = 'duration'
    likes = 'likes'
    manual = 'manual'
    modified_time = 'modified_time'
    plays = 'plays'


class MeAlbumsAlbumIdVideosPutRequest(BaseModel):
    videos: str = Field(
        ...,
        description='A comma-separated list of video URIs.',
        examples=['/videos/258684937,/videos/273576296'],
    )


class MeAlbumsAlbumIdVideosVideoIdSetAlbumThumbnailPostRequest(BaseModel):
    time_code: Optional[float] = Field(
        None,
        description='The video frame time in seconds to use as the album thumbnail.',
        examples=[300],
    )


class Sort34(Enum):
    alphabetical = 'alphabetical'
    comments = 'comments'
    date = 'date'
    duration = 'duration'
    likes = 'likes'
    plays = 'plays'


class Sort36(Enum):
    alphabetical = 'alphabetical'
    date = 'date'
    name = 'name'


class Filter20(Enum):
    moderated = 'moderated'


class Sort38(Enum):
    alphabetical = 'alphabetical'
    date = 'date'
    followers = 'followers'
    videos = 'videos'


class MeCustomlogosGetResponse(RootModel[List[Picture]]):
    root: List[Picture]


class Type12(Enum):
    appears = 'appears'
    category_featured = 'category_featured'
    channel = 'channel'
    facebook_feed = 'facebook_feed'
    following = 'following'
    group = 'group'
    likes = 'likes'
    ondemand_publish = 'ondemand_publish'
    share = 'share'
    tagged_with = 'tagged_with'
    twitter_timeline = 'twitter_timeline'
    uploads = 'uploads'


class Sort40(Enum):
    alphabetical = 'alphabetical'
    date = 'date'


class MeFollowersGetResponse(RootModel[List[User]]):
    root: List[User]


class Filter22(Enum):
    online = 'online'


class MeFollowingGetResponse(RootModel[List[User]]):
    root: List[User]


class MeFollowingPostRequest(BaseModel):
    users: List[str] = Field(
        ..., description='An array of user URIs for the list of users to follow.'
    )


class Filter24(Enum):
    moderated = 'moderated'


class Sort44(Enum):
    alphabetical = 'alphabetical'
    date = 'date'
    members = 'members'
    videos = 'videos'


class Filter26(Enum):
    embeddable = 'embeddable'


class Sort46(Enum):
    alphabetical = 'alphabetical'
    comments = 'comments'
    date = 'date'
    duration = 'duration'
    likes = 'likes'
    plays = 'plays'


class Filter28(Enum):
    film = 'film'
    series = 'series'


class Sort48(Enum):
    added = 'added'
    alphabetical = 'alphabetical'
    date = 'date'
    modified_time = 'modified_time'
    name = 'name'
    publish_time = 'publish.time'
    rating = 'rating'


class AcceptedCurrencies(Enum):
    AUD = 'AUD'
    CAD = 'CAD'
    CHF = 'CHF'
    DKK = 'DKK'
    EUR = 'EUR'
    GBP = 'GBP'
    JPY = 'JPY'
    KRW = 'KRW'
    NOK = 'NOK'
    PLN = 'PLN'
    SEK = 'SEK'
    USD = 'USD'


class Price(BaseModel):
    AUD: Optional[float] = Field(
        None, description='The purchase price of this video in AUD.', examples=[2.99]
    )
    CAD: Optional[float] = Field(
        None, description='The purchase price of this video in CAD.', examples=[2.99]
    )
    CHF: Optional[float] = Field(
        None, description='The purchase price of this video in CHF.', examples=[2.99]
    )
    DKK: Optional[float] = Field(
        None, description='The purchase price of this video in DKK.', examples=[2.99]
    )
    EUR: Optional[float] = Field(
        None, description='The purchase price of this video in EUR.', examples=[2.99]
    )
    GBP: Optional[float] = Field(
        None, description='The purchase price of this video in GBP.', examples=[2.99]
    )
    JPY: Optional[float] = Field(
        None, description='The purchase price of this video in JPY.', examples=[2.99]
    )
    KRW: Optional[float] = Field(
        None, description='The purchase price of this video in KRW.', examples=[2.99]
    )
    NOK: Optional[float] = Field(
        None, description='The purchase price of this video in NOK.', examples=[2.99]
    )
    PLN: Optional[float] = Field(
        None, description='The purchase price of this video in PLN.', examples=[2.99]
    )
    SEK: Optional[float] = Field(
        None, description='The purchase price of this video in SEK.', examples=[2.99]
    )
    USD: Optional[float] = Field(
        None,
        description='The purchase price of this video in USD when `type` is `film`, or the purchase price of the entire collection in USD when `type` is `series`.',
        examples=[2.99],
    )


class Buy4(BaseModel):
    active: Optional[bool] = Field(
        None,
        description='Whether the Buy action is active. *Required if `rent.active` is false.',
        examples=['true'],
    )
    download: Optional[bool] = Field(
        None,
        description='Whether people who buy the video can download it. To use this field, `type` must be `film`.',
        examples=['true'],
    )
    price: Optional[Price] = None


class ContentRating1(Enum):
    drugs = 'drugs'
    language = 'language'
    nudity = 'nudity'
    safe = 'safe'
    unrated = 'unrated'
    violence = 'violence'


class Price1(BaseModel):
    USD: Optional[float] = Field(
        None,
        description='The purchase price per episode. *Required if `episodes.buy.active` is true.',
        examples=[1.99],
    )


class Buy5(BaseModel):
    active: Optional[bool] = Field(
        None, description='Whether episodes can be bought.', examples=['true']
    )
    download: Optional[bool] = Field(
        None,
        description='Whether people who buy the episode can download it. To use this field, `type` must be `series`.',
        examples=['true'],
    )
    price: Optional[Price1] = None


class Period1(Enum):
    field_1_week = '1 week'
    field_1_year = '1 year'
    field_24_hour = '24 hour'
    field_3_month = '3 month'
    field_30_day = '30 day'
    field_48_hour = '48 hour'
    field_6_month = '6 month'
    field_72_hour = '72 hour'


class Price2(BaseModel):
    USD: Optional[float] = Field(
        None,
        description='The default price to rent an episode. This field is applicable only when `type` is `series`. *Required if `episodes.rent.active` is true.',
        examples=[0.99],
    )


class Rent3(BaseModel):
    active: Optional[bool] = Field(
        None, description='Whether episodes can be rented', examples=['true']
    )
    period: Optional[Period1] = Field(
        None, description='The period in which this episode can be rented for.'
    )
    price: Optional[Price2] = None


class Episodes1(BaseModel):
    buy: Optional[Buy5] = None
    rent: Optional[Rent3] = None


class Price3(BaseModel):
    AUD: Optional[float] = Field(
        None, description='The rental price of this video in AUD.', examples=[0.99]
    )
    CAD: Optional[float] = Field(
        None, description='The rental price of this video in CAD.', examples=[0.99]
    )
    CHF: Optional[float] = Field(
        None, description='The rental price of this video in CHF.', examples=[0.99]
    )
    DKK: Optional[float] = Field(
        None, description='The rental price of this video in DKK.', examples=[0.99]
    )
    EUR: Optional[float] = Field(
        None, description='The rental price of this video in EUR.', examples=[0.99]
    )
    GBP: Optional[float] = Field(
        None, description='The rental price of this video in GBP.', examples=[0.99]
    )
    JPY: Optional[float] = Field(
        None, description='The rental price of this video in JPY.', examples=[0.99]
    )
    KRW: Optional[float] = Field(
        None, description='The rental price of this video in KRW.', examples=[0.99]
    )
    NOK: Optional[float] = Field(
        None, description='The rental price of this video in NOK.', examples=[0.99]
    )
    PLN: Optional[float] = Field(
        None, description='The rental price of this video in PLN.', examples=[0.99]
    )
    SEK: Optional[float] = Field(
        None, description='The rental price of this video in SEK.', examples=[0.99]
    )
    USD: Optional[float] = Field(
        None,
        description='The rental price of this video in USD when `type` is `film`, or the rental price of the entire collection in USD when `type` is `series`.',
        examples=[0.99],
    )


class Rent4(BaseModel):
    active: Optional[bool] = Field(
        None,
        description='Whether the video can be rented. *Required if `buy.active` is false.',
        examples=['true'],
    )
    period: Optional[Period1] = Field(
        None, description='The period in which this can be rented for.'
    )
    price: Optional[Price3] = None


class Price4(BaseModel):
    USD: Optional[float] = Field(
        None,
        description='The monthly subscription price in USD. *Required if `subscription.active` is true.',
        examples=[9.99],
    )


class Monthly(BaseModel):
    active: Optional[bool] = Field(
        None,
        description='Whether monthly subscription is active. *Required if `rent.active` and `buy.active` are false.',
        examples=['true'],
    )
    price: Optional[Price4] = None


class Subscription1(BaseModel):
    monthly: Optional[Monthly] = None


class Type14(Enum):
    film = 'film'
    series = 'series'


class MeOndemandPagesPostRequest(BaseModel):
    accepted_currencies: Optional[AcceptedCurrencies] = Field(
        None,
        description='An array of accepted currencies.\n\nOption descriptions:\n * `AUD` - Australian Dollar\n * `CAD` - Canadian Dollar\n * `CHF` - Swiss Franc\n * `DKK` - Danish Krone\n * `EUR` - Euro\n * `GBP` - British Pound\n * `JPY` - Japanese Yen\n * `KRW` - South Korean Won\n * `NOK` - Norwegian Krone\n * `PLN` - Polish Zloty\n * `SEK` - Swedish Krona\n * `USD` - US Dollar\n',
    )
    buy: Optional[Buy4] = None
    content_rating: ContentRating1 = Field(
        ...,
        description='One or more ratings, either as a comma-separated list or as a JSON array depending on the request format.',
    )
    description: str = Field(
        ...,
        description='The description of the On Demand page.',
        examples=[
            'DARBY FOREVER follows the fantasies of Darby, a shopgirl at "Bobbins & Notions".'
        ],
    )
    domain_link: Optional[str] = Field(
        None,
        description='The custom domain of the On Demand page.',
        examples=['https://example.com'],
    )
    episodes: Optional[Episodes1] = None
    link: Optional[str] = Field(
        None,
        description="The custom string to use in this On Demand page's Vimeo URL.",
        examples=['darbyforever'],
    )
    name: str = Field(
        ..., description='The name of the On Demand page.', examples=['Darby Forever']
    )
    rent: Optional[Rent4] = None
    subscription: Optional[Subscription1] = None
    type: Type14 = Field(..., description='The type of On Demand page.')


class Filter30(Enum):
    all = 'all'
    expiring_soon = 'expiring_soon'
    film = 'film'
    important = 'important'
    purchased = 'purchased'
    rented = 'rented'
    series = 'series'
    subscription = 'subscription'
    unwatched = 'unwatched'
    watched = 'watched'


class Sort50(Enum):
    added = 'added'
    alphabetical = 'alphabetical'
    date = 'date'
    name = 'name'
    purchase_time = 'purchase_time'
    rating = 'rating'
    release_date = 'release_date'


class MePicturesGetResponse(RootModel[List[Picture]]):
    root: List[Picture]


class MePicturesPortraitsetIdPatchRequest(BaseModel):
    active: Optional[bool] = Field(
        None,
        description="Whether the picture is the user's active portrait.",
        examples=['true'],
    )


class Sort52(Enum):
    alphabetical = 'alphabetical'
    date = 'date'


class MePortfoliosGetResponse(RootModel[List[Portfolio]]):
    root: List[Portfolio]


class Filter32(Enum):
    embeddable = 'embeddable'


class Sort54(Enum):
    alphabetical = 'alphabetical'
    comments = 'comments'
    date = 'date'
    default = 'default'
    likes = 'likes'
    manual = 'manual'
    plays = 'plays'


class Outro1(Enum):
    nothing = 'nothing'


class MePresetsPresetIdPatchRequest(BaseModel):
    outro: Optional[Outro1] = Field(None, description='Disable the outro.')


class Sort56(Enum):
    date = 'date'
    default = 'default'
    modified_time = 'modified_time'
    name = 'name'


class MeProjectsPostRequest(BaseModel):
    name: str = Field(
        ..., description='The name of the project.', examples=['Rough cuts']
    )


class MeProjectsProjectIdPatchRequest(BaseModel):
    name: str = Field(
        ..., description='The name of the project.', examples=['Rough cuts']
    )


class Sort58(Enum):
    alphabetical = 'alphabetical'
    date = 'date'
    default = 'default'
    duration = 'duration'
    last_user_action_event_date = 'last_user_action_event_date'


class Filter34(Enum):
    app_only = 'app_only'
    embeddable = 'embeddable'
    featured = 'featured'
    playable = 'playable'


class Sort60(Enum):
    alphabetical = 'alphabetical'
    comments = 'comments'
    date = 'date'
    default = 'default'
    duration = 'duration'
    last_user_action_event_date = 'last_user_action_event_date'
    likes = 'likes'
    modified_time = 'modified_time'
    plays = 'plays'


class Buttons2(BaseModel):
    embed: Optional[bool] = Field(
        None, description='Show or hide the Embed button.', examples=['true']
    )
    fullscreen: Optional[bool] = Field(
        None, description='Show or hide the Fullscreen button.', examples=['true']
    )
    hd: Optional[bool] = Field(
        None, description='Show or hide the HD button.', examples=['true']
    )
    like: Optional[bool] = Field(
        None, description='Show or hide the Like button.', examples=['true']
    )
    scaling: Optional[bool] = Field(
        None,
        description='Show or hide the Scaling button (shown only in Fullscreen mode).',
        examples=['true'],
    )
    share: Optional[bool] = Field(
        None, description='Show or hide the Share button.', examples=['true']
    )
    watchlater: Optional[bool] = Field(
        None, description='Show or hide the Watch Later button.', examples=['true']
    )


class Custom1(BaseModel):
    active: Optional[bool] = Field(
        None, description='Show or hide your custom logo.', examples=['true']
    )
    link: Optional[str] = Field(
        None,
        description='The URL that loads when the user clicks your custom logo.',
        examples=['https://example.com'],
    )
    sticky: Optional[bool] = Field(
        None,
        description='Whether always to show the custom logo or to hide it after time with the rest of the UI.',
        examples=['true'],
    )


class Logos2(BaseModel):
    custom: Optional[Custom1] = None
    vimeo: Optional[bool] = Field(
        None, description='Show or hide the Vimeo logo.', examples=['true']
    )


class Title1(BaseModel):
    name: Optional[Name] = Field(
        None,
        description='Show or hide the video title, or enable the user to determine whether the video title appears.',
    )
    owner: Optional[Owner] = Field(
        None,
        description='Show or hide the owner information, or enable the user to determine whether the owner information appears.',
    )
    portrait: Optional[Portrait] = Field(
        None,
        description='Show or hide the owner portrait, or enable the user to determine whether the owner portrait appears.',
    )


class Embed4(BaseModel):
    buttons: Optional[Buttons2] = None
    color: Optional[str] = Field(
        None, description='The main color of the embed player.', examples=['#1ab7ea']
    )
    logos: Optional[Logos2] = None
    playbar: Optional[bool] = Field(
        None, description='Show or hide the playbar.', examples=['true']
    )
    title: Optional[Title1] = None
    volume: Optional[bool] = Field(
        None, description='Show or hide the volume selector.', examples=['true']
    )


class Embed5(Enum):
    private = 'private'
    public = 'public'
    whitelist = 'whitelist'


class Privacy10(BaseModel):
    add: Optional[bool] = Field(
        None,
        description='Whether a user can add the video to an album, channel, or group.',
        examples=['true'],
    )
    comments: Optional[Comments3] = Field(
        None, description='The privacy level required to comment on the video.'
    )
    download: Optional[bool] = Field(
        None,
        description='Whether a user can download the video. Not available to users with a Basic membership',
        examples=['true'],
    )
    embed: Optional[Embed5] = Field(
        None,
        description="The video's embed settings. The `whitelist` value enables you to define all valid embed domains. See our [documentation](https://developer.vimeo.com/api/endpoints/videos#/{video_id}/privacy/domains) for details on adding and removing domains.",
    )
    view: Optional[View3] = Field(
        None,
        description="The video's privacy setting. When privacy is `users`, `application/json` is the only valid content type. Basic users can't set privacy to `unlisted`.",
    )


class Reason(Enum):
    at = 'at'
    bn = 'bn'
    n = 'n'
    sl = 'sl'
    ss = 'ss'
    v = 'v'


class Mpaa(BaseModel):
    reason: Optional[Reason] = Field(
        None,
        description="The reason for the video's MPAA rating.\n\nOption descriptions:\n * `at` - Adult themes\n * `bn` - Brief nudity\n * `n` - Nudity\n * `sl` - Strong language\n * `ss` - Sexual situations\n * `v` - Violence\n",
    )


class Reason1(Enum):
    d = 'd'
    fv = 'fv'
    l = 'l'
    ss = 'ss'
    v = 'v'


class Tv(BaseModel):
    reason: Optional[Reason1] = Field(
        None,
        description="The reason for the video's TV rating.\n\nOption descriptions:\n * `d` - Suggestive dialogue\n * `fv` - Fantasy violence\n * `l` - Language\n * `ss` - Sexual situations\n * `v` - Violence\n",
    )


class Ratings(BaseModel):
    mpaa: Optional[Mpaa] = None
    tv: Optional[Tv] = None


class ReviewPage(BaseModel):
    active: Optional[bool] = Field(
        None, description='Enable or disable video review.', examples=['true']
    )


class DirectorTimelineItem1(BaseModel):
    pitch: float = Field(
        ...,
        description='The timeline pitch. This value must be between -90 and 90.',
        examples=[70],
    )
    roll: Optional[float] = Field(None, description='The timeline roll.')
    time_code: float = Field(
        ..., description='The 360 director timeline time code.', examples=[5]
    )
    yaw: float = Field(
        ...,
        description='The timeline yaw. This value must be between 0 and 360.',
        examples=[125],
    )


class Spatial1(BaseModel):
    director_timeline: Optional[List[DirectorTimelineItem1]] = Field(
        None, description='The 360 director timeline.'
    )
    field_of_view: Optional[float] = Field(
        None,
        description='The 360 field of view: default 50, minimum 30, maximum 90.',
        examples=[50],
    )
    projection: Optional[Projection] = Field(
        None, description='The 360 spatial projection.'
    )
    stereo_format: Optional[StereoFormat] = Field(
        None, description='The 360 spatial stereo format.'
    )


class Upload2(BaseModel):
    approach: Approach = Field(..., description='The upload approach.')
    link: Optional[str] = Field(
        None,
        description='The public URL at which the video is hosted. The URL must be valid for at least 24 hours. Use this parameter when `approach` is `pull`.',
        examples=['https://example.com/video.mp4'],
    )
    redirect_url: Optional[str] = Field(
        None,
        description="The app's redirect URL. Use this parameter when `approach` is `post`.",
        examples=['https://example.com'],
    )
    size: Optional[str] = Field(
        None,
        description='The size in bytes of the video to upload.',
        examples=['13623861'],
    )


class MeVideosPostRequest(BaseModel):
    content_rating: Optional[List[str]] = Field(
        None,
        description='A list of values describing the content in this video. Find the full list in the [/contentratings](https://developer.vimeo.com/api/endpoints/videos#GET/contentratings) endpoint.',
    )
    description: Optional[str] = Field(
        None,
        description='The description of the video.',
        examples=['A celebration of 10 years of Staff Picks.'],
    )
    embed: Optional[Embed4] = None
    license: Optional[License] = Field(
        None, description='The Creative Commons license.'
    )
    locale: Optional[str] = Field(
        None,
        description="The video's default language. For a full list of valid languages, use the [/languages?filter=texttracks](https://developer.vimeo.com/api/endpoints/videos#GET/languages) endpoint.",
        examples=['en_US'],
    )
    name: Optional[str] = Field(
        None,
        description='The title of the video.',
        examples=['Celebrating 10 Years of Staff Picks'],
    )
    password: Optional[str] = Field(
        None,
        description='The password. When you set `privacy.view` to `password`, you must provide the password as an additional parameter.',
        examples=['hunter1'],
    )
    privacy: Optional[Privacy10] = None
    ratings: Optional[Ratings] = None
    review_page: Optional[ReviewPage] = None
    spatial: Optional[Spatial1] = None
    upload: Upload2


class Filter36(Enum):
    embeddable = 'embeddable'


class Sort62(Enum):
    alphabetical = 'alphabetical'
    comments = 'comments'
    date = 'date'
    duration = 'duration'
    likes = 'likes'
    plays = 'plays'


class GrantType(Enum):
    authorization_code = 'authorization_code'


class OauthAccessTokenPostRequest(BaseModel):
    code: str = Field(
        ...,
        description='The authorization code received from the authorization server.',
        examples=['1234abcd'],
    )
    grant_type: GrantType = Field(
        ..., description='The grant type. Must be set to `authorization_code`.'
    )
    redirect_uri: str = Field(
        ...,
        description='The redirect URI. Must match the URI from `/oauth/authorize`.',
        examples=['https://example.com'],
    )


class GrantType1(Enum):
    client_credentials = 'client_credentials'


class OauthAuthorizeClientPostRequest(BaseModel):
    grant_type: GrantType1 = Field(
        ..., description='The grant type. Must be set to `client_credentials`.'
    )
    scope: str = Field(
        ...,
        description='A space-separated list of the authentication [scopes](https://developer.vimeo.com/api/authentication#supported-scopes) that you want to access. The default is `public`.',
        examples=['public'],
    )


class GrantType2(Enum):
    vimeo_oauth1 = 'vimeo_oauth1'


class OauthAuthorizeVimeoOauth1PostRequest(BaseModel):
    grant_type: GrantType2 = Field(
        ..., description='The grant type. Must be set to `vimeo_oauth1`.'
    )
    token: str = Field(
        ...,
        description='The OAuth 1 token.',
        examples=['58037c0078d5f54e15e638cc0dd882a570b13c50'],
    )
    token_secret: str = Field(
        ...,
        description='The OAuth 1 token secret.',
        examples=['NTgwMzdjMDA3OGQ1ZjU0ZTE1ZTYzOGNjMGRkODgyYTU3MGIxM2M1MA=='],
    )


class OndemandGenresGetResponse(RootModel[List[OnDemandGenre]]):
    root: List[OnDemandGenre]


class Filter38(Enum):
    country = 'country'
    my_region = 'my_region'


class Sort64(Enum):
    alphabetical = 'alphabetical'
    date = 'date'
    name = 'name'
    publish_time = 'publish.time'
    videos = 'videos'


class Preorder1(BaseModel):
    active: Optional[bool] = Field(
        None,
        description='If set to true, you will enable pre-orders on the On Demand page.',
        examples=['true'],
    )
    publish_time: Optional[str] = Field(
        None,
        description='The time that the On Demand page will be published. *Required if `preorder.active` is `true`.',
        examples=['2017-05-16T15:05:43+00:00'],
    )


class Publish(BaseModel):
    active: Optional[bool] = Field(
        None, description='Whether to publish the On Demand page.', examples=['true']
    )


class OndemandPagesOndemandIdPatchRequest(BaseModel):
    link: Optional[str] = Field(
        None,
        description="The custom string to use in this On Demand page's Vimeo URL.",
        examples=['darbyforever'],
    )
    preorder: Optional[Preorder1] = None
    publish: Optional[Publish] = None
    publish_when_ready: Optional[bool] = Field(
        None,
        description='Whether to publish the On Demand page automatically after all videos are finished transcoding.',
        examples=['true'],
    )


class OndemandPagesOndemandIdBackgroundsGetResponse(RootModel[List[Picture]]):
    root: List[Picture]


class OndemandPagesOndemandIdBackgroundsBackgroundIdPatchRequest(BaseModel):
    active: Optional[bool] = Field(
        None,
        description='Whether to make this background the active background.',
        examples=['true'],
    )


class OndemandPagesOndemandIdGenresGetResponse(RootModel[List[OnDemandGenre]]):
    root: List[OnDemandGenre]


class Filter40(Enum):
    extra = 'extra'
    main = 'main'
    trailer = 'trailer'


class Sort66(Enum):
    alphabetical = 'alphabetical'
    date = 'date'


class OndemandPagesOndemandIdLikesGetResponse(RootModel[List[User]]):
    root: List[User]


class OndemandPagesOndemandIdPicturesGetResponse(RootModel[List[Picture]]):
    root: List[Picture]


class OndemandPagesOndemandIdPicturesPosterIdPatchRequest(BaseModel):
    active: Optional[bool] = Field(
        None,
        description='Whether to make this picture the active picture.',
        examples=['true'],
    )


class Filter42(Enum):
    batch = 'batch'
    default = 'default'
    single = 'single'
    vip = 'vip'


class DiscountType1(Enum):
    free = 'free'
    percent = 'percent'


class StreamPeriod1(Enum):
    field_1_week = '1_week'
    field_1_year = '1_year'
    field_24_hour = '24_hour'
    field_30_day = '30_day'
    field_3_month = '3_month'
    field_48_hour = '48_hour'
    field_6_month = '6_month'
    field_72_hour = '72_hour'


class Type15(Enum):
    batch = 'batch'
    single = 'single'


class OndemandPagesOndemandIdPromotionsPostRequest(BaseModel):
    access_type: Optional[AccessType] = Field(
        None,
        description='The promotion access type, which is a purchase option that isn\'t available on the container. VIP promotions always make the content free of charge. If you use this type, you must further define the promotion with the `download` or `stream_period` fields.\n\nOption descriptions:\n * `default` - Promotions grant discount on the existing purchase options for an On Demand Container.\n * `vip` - Promotions can be used to grant free access to VOD content before it is released, or to offer a purchase option that isn\'t available on the container. "vip" promotions will always make the content free, and must be further defined with the `download` or `stream_period` fields.\n',
    )
    code: Optional[str] = Field(
        None,
        description='The promotion code. This field is ignored for batch promotions.',
        examples=['sxsw2018'],
    )
    discount_type: Optional[DiscountType1] = Field(
        None,
        description='The type of discount offered by the promo code. When `access_type` is `vip`, the value of this field must be `free`.\n\nOption descriptions:\n * `free` - Reduces the price to zero.\n * `percent` - Reduces the price by an amount defined in the "percent_off" field.\n',
    )
    download: bool = Field(
        ...,
        description='Whether the promotion grants download access to VOD content. This is necessary only when not previously defined in the On Demand container or when `access_type` is `vip` or `product_type` is `buy`.',
        examples=['true'],
    )
    end_time: Optional[str] = Field(
        None,
        description="The end of the promotion period. If you don't specify a value, the promotion will never expire.",
        examples=['1526089920'],
    )
    label: Optional[str] = Field(
        None,
        description='The description of a batch promotion. This field is ignored for single promotions.',
        examples=['sxsw'],
    )
    percent_off: Optional[float] = Field(
        None,
        description='The percentage of the discount by using this promo code. This field is applicable only when `discount_type` is `percent`.',
        examples=[50],
    )
    product_type: Optional[ProductType] = Field(
        None,
        description='The type of transaction to which the promotion applies. When `access_type` is `default`, the default value is `any`, but the default value is `rent` when `access_type` is `vip`. Also, when `access_type` is `vip`, the only valid product types are `buy` and `rent`.',
    )
    start_time: Optional[str] = Field(
        None,
        description="The start of the promotion period. If you don't specify a value, the start time defaults to the time that the promotion was created.",
        examples=['1526089920'],
    )
    stream_period: StreamPeriod1 = Field(
        ...,
        description='The amount of time that a user has access to the VOD content upon redeeming a promo code. This field is necessary only when not defined in the On Demand container or when creating promotions when `access_type` is `vip` or `product_type` is `rent`.',
    )
    total: float = Field(
        ...,
        description='The number of promotions to generate when `type` is `batch`, or the number of uses of the promotion when `type` is `single`.',
        examples=[9],
    )
    type: Type15 = Field(
        ...,
        description='The type of promotion. When `access_type` is `vip`, the value for this field must be `batch`.\n\nOption descriptions:\n * `batch` - Generates many random promo codes with one use each.\n * `single` - Generates one promo code that can be used many times.\n',
    )


class OndemandPagesOndemandIdRegionsDeleteRequest(BaseModel):
    countries: Optional[List[str]] = Field(
        None, description='An array of country codes.'
    )


class OndemandPagesOndemandIdRegionsDeleteResponse(RootModel[List[OnDemandRegion]]):
    root: List[OnDemandRegion]


class OndemandPagesOndemandIdRegionsGetResponse(RootModel[List[OnDemandRegion]]):
    root: List[OnDemandRegion]


class OndemandPagesOndemandIdRegionsPutRequest(BaseModel):
    countries: List[str] = Field(..., description='An array of country codes.')


class Filter44(Enum):
    viewable = 'viewable'


class Sort68(Enum):
    date = 'date'
    manual = 'manual'


class Sort70(Enum):
    date = 'date'
    default = 'default'
    manual = 'manual'
    name = 'name'
    purchase_time = 'purchase_time'
    release_date = 'release_date'


class Filter48(Enum):
    all = 'all'
    buy = 'buy'
    expiring_soon = 'expiring_soon'
    extra = 'extra'
    main = 'main'
    main_viewable = 'main.viewable'
    rent = 'rent'
    trailer = 'trailer'
    unwatched = 'unwatched'
    viewable = 'viewable'
    watched = 'watched'


class Sort72(Enum):
    date = 'date'
    default = 'default'
    episode = 'episode'
    manual = 'manual'
    name = 'name'
    purchase_time = 'purchase_time'
    release_date = 'release_date'


class Price5(BaseModel):
    AUD: Optional[float] = Field(
        None, description='The purchase price of this video in AUD.', examples=[1.99]
    )
    CAD: Optional[float] = Field(
        None, description='The purchase price of this video in CAD.', examples=[1.99]
    )
    CHF: Optional[float] = Field(
        None, description='The purchase price of this video in CHF.', examples=[1.99]
    )
    DKK: Optional[float] = Field(
        None, description='The purchase price of this video in DKK.', examples=[1.99]
    )
    EUR: Optional[float] = Field(
        None, description='The purchase price of this video in EUR.', examples=[1.99]
    )
    GBP: Optional[float] = Field(
        None, description='The purchase price of this video in GBP.', examples=[1.99]
    )
    JPY: Optional[float] = Field(
        None, description='The purchase price of this video in JPY.', examples=[1.99]
    )
    KRW: Optional[float] = Field(
        None, description='The purchase price of this video in KRW.', examples=[1.99]
    )
    NOK: Optional[float] = Field(
        None, description='The purchase price of this video in NOK.', examples=[1.99]
    )
    PLN: Optional[float] = Field(
        None, description='The purchase price of this video in PLN.', examples=[1.99]
    )
    SEK: Optional[float] = Field(
        None, description='The purchase price of this video in SEK.', examples=[1.99]
    )
    USD: Optional[float] = Field(
        None,
        description='The purchase price of this video in USD. *Required if `buy.active` is true.',
        examples=[1.99],
    )


class Buy6(BaseModel):
    price: Optional[Price5] = None


class Price6(BaseModel):
    AUD: Optional[float] = Field(
        None, description='The rental price of this video in AUD.', examples=[0.99]
    )
    CAD: Optional[float] = Field(
        None, description='The rental price of this video in CAD.', examples=[0.99]
    )
    CHF: Optional[float] = Field(
        None, description='The rental price of this video in CHF.', examples=[0.99]
    )
    DKK: Optional[float] = Field(
        None, description='The rental price of this video in DKK.', examples=[0.99]
    )
    EUR: Optional[float] = Field(
        None, description='The rental price of this video in EUR.', examples=[0.99]
    )
    GBP: Optional[float] = Field(
        None, description='The rental price of this video in GBP.', examples=[0.99]
    )
    JPY: Optional[float] = Field(
        None, description='The rental price of this video in JPY.', examples=[0.99]
    )
    KRW: Optional[float] = Field(
        None, description='The rental price of this video in KRW.', examples=[0.99]
    )
    NOK: Optional[float] = Field(
        None, description='The rental price of this video in NOK.', examples=[0.99]
    )
    PLN: Optional[float] = Field(
        None, description='The rental price of this video in PLN.', examples=[0.99]
    )
    SEK: Optional[float] = Field(
        None, description='The rental price of this video in SEK.', examples=[0.99]
    )
    USD: Optional[float] = Field(
        None,
        description='The rental price of this video in USD. *Required if `rent.active` is true.',
        examples=[0.99],
    )


class Rent5(BaseModel):
    price: Optional[Price6] = None


class Type16(Enum):
    extra = 'extra'
    main = 'main'
    trailer = 'trailer'


class OndemandPagesOndemandIdVideosVideoIdPutRequest(BaseModel):
    buy: Optional[Buy6] = None
    position: Optional[float] = Field(
        None,
        description='The position of this video in the On Demand collection.',
        examples=[10],
    )
    release_year: Optional[float] = Field(
        None, description='The video release year.', examples=[2018]
    )
    rent: Optional[Rent5] = None
    type: Type16 = Field(
        ..., description='The type of video that you are adding to the On Demand page.'
    )


class OndemandRegionsGetResponse(RootModel[List[OnDemandRegion]]):
    root: List[OnDemandRegion]


class Sort74(Enum):
    created_time = 'created_time'
    duration = 'duration'
    name = 'name'


class Sort76(Enum):
    alphabetical = 'alphabetical'
    date = 'date'
    followers = 'followers'
    relevant = 'relevant'
    videos = 'videos'


class UsersGetResponse(RootModel[List[User]]):
    root: List[User]


class Privacy11(BaseModel):
    add: Optional[bool] = Field(
        None,
        description='Whether a user can add the video to an album, channel, or group. This value becomes the default add setting for all future videos uploaded by the user.',
        examples=['true'],
    )
    comments: Optional[Comments3] = Field(
        None,
        description='Who can comment on the video. This value becomes the default comment setting for all future videos that this user uploads.',
    )
    download: Optional[bool] = Field(
        None,
        description='Whether a user can download the video. This value becomes the default download setting for all future videos that this user uploads.',
        examples=['true'],
    )
    embed: Optional[Embed5] = Field(
        None,
        description='The privacy for embed videos. The `whitelist` value enables you to define all valid embed domains. See our [documentation](https://developer.vimeo.com/api/endpoints/videos#/{video_id}/privacy/domains) for adding and removing domains.',
    )
    view: Optional[View3] = Field(
        None,
        description='Who can view the video. This value becomes the default view setting for all future videos that this user uploads.',
    )


class Videos14(BaseModel):
    privacy: Optional[Privacy11] = None


class UsersUserIdPatchRequest(BaseModel):
    bio: Optional[str] = Field(
        None,
        description="The user's bio.",
        examples=['This is where you will find videos and news updates from the staff'],
    )
    content_filter: Optional[List[str]] = Field(
        None,
        description='A list of values describing the content in this video. Find the full list in the [/contentratings](https://developer.vimeo.com/api/endpoints/videos#GET/contentratings) endpoint. You must provide a comma-separated list if you are using a query string or an array if you are using JSON.',
    )
    link: Optional[str] = Field(
        None, description="The user's custom Vimeo URL slug.", examples=['staff']
    )
    location: Optional[str] = Field(
        None, description="The user's location.", examples=['New York City']
    )
    name: Optional[str] = Field(
        None, description="The user's display name.", examples=['Vimeo Staff']
    )
    password: Optional[str] = Field(
        None,
        description='The default password for all future videos that this user uploads. To use this field, the `videos.privacy.view` field must be `password`.',
        examples=['hunter1'],
    )
    videos: Optional[Videos14] = None


class Sort78(Enum):
    alphabetical = 'alphabetical'
    date = 'date'
    duration = 'duration'
    videos = 'videos'


class Privacy12(Enum):
    anybody = 'anybody'
    embed_only = 'embed_only'
    password = 'password'


class Sort80(Enum):
    added_first = 'added_first'
    added_last = 'added_last'
    alphabetical = 'alphabetical'
    arranged = 'arranged'
    comments = 'comments'
    likes = 'likes'
    newest = 'newest'
    oldest = 'oldest'
    plays = 'plays'


class UsersUserIdAlbumsPostRequest(BaseModel):
    brand_color: Optional[str] = Field(
        None,
        description='The hexadecimal code for the color of the player buttons.',
        examples=['ff66ee'],
    )
    description: Optional[str] = Field(
        None,
        description='The description of the album.',
        examples=['Vimeo holiday videos!'],
    )
    hide_nav: Optional[bool] = Field(
        None,
        description='Whether to hide Vimeo navigation when displaying the album.',
        examples=['true'],
    )
    layout: Optional[Layout] = Field(
        None, description='The type of layout for presenting the album.'
    )
    name: str = Field(
        ..., description='The name of the album.', examples=['Vimeo Holiday Videos!']
    )
    password: Optional[str] = Field(
        None,
        description="The album's password. Required only if **privacy** is `password`.",
        examples=['hunter1'],
    )
    privacy: Optional[Privacy12] = Field(
        None, description='The privacy level of the album.'
    )
    review_mode: Optional[bool] = Field(
        None,
        description='Whether album videos should use the review mode URL.',
        examples=['true'],
    )
    sort: Optional[Sort80] = Field(
        None, description="The default sort order of the album's videos."
    )
    theme: Optional[Theme] = Field(None, description='The color theme of the album.')


class UsersUserIdAlbumsAlbumIdPatchRequest(BaseModel):
    brand_color: Optional[str] = Field(
        None,
        description='The hexadecimal code for the color of the player buttons.',
        examples=['ff66ee'],
    )
    description: Optional[str] = Field(
        None,
        description='The description of the album.',
        examples=['Vimeo holiday videos!'],
    )
    domain: Optional[str] = Field(
        None,
        description='The custom domain a user has selected for their album.',
        examples=['mycustomdomain.com'],
    )
    hide_nav: Optional[bool] = Field(
        None,
        description='Whether to hide Vimeo navigation when displaying the album.',
        examples=['true'],
    )
    layout: Optional[Layout] = Field(
        None, description='The type of layout for presenting the album.'
    )
    name: Optional[str] = Field(
        None, description='The name of the album.', examples=['Vimeo Holiday Videos!']
    )
    password: Optional[str] = Field(
        None,
        description="The album's password. Required only if **privacy** is `password`.",
        examples=['hunter1'],
    )
    privacy: Optional[Privacy12] = Field(
        None, description='The privacy level of the album.'
    )
    review_mode: Optional[bool] = Field(
        None,
        description='Whether album videos should use the review mode URL.',
        examples=['true'],
    )
    sort: Optional[Sort80] = Field(
        None, description="The default sort order of the album's videos."
    )
    theme: Optional[Theme] = Field(None, description='The color theme of the album.')
    url: Optional[str] = Field(
        None,
        description='The custom Vimeo URL a user has selected for their album.',
        examples=['my-custom-url'],
    )
    use_custom_domain: Optional[bool] = Field(
        None,
        description='Whether the user has opted in to use a custom domain for their album.',
        examples=['true'],
    )


class UsersUserIdAlbumsAlbumIdCustomThumbnailsGetResponse(RootModel[List[Picture]]):
    root: List[Picture]


class UsersUserIdAlbumsAlbumIdCustomThumbnailsThumbnailIdPatchRequest(BaseModel):
    active: Optional[bool] = Field(
        None,
        description='Whether to make this the active album thumbnail.',
        examples=['true'],
    )


class UsersUserIdAlbumsAlbumIdLogosGetResponse(RootModel[List[Picture]]):
    root: List[Picture]


class UsersUserIdAlbumsAlbumIdLogosLogoIdPatchRequest(BaseModel):
    active: Optional[bool] = Field(
        None,
        description='Whether to make this the active album logo.',
        examples=['true'],
    )


class Filter50(Enum):
    embeddable = 'embeddable'


class Sort82(Enum):
    alphabetical = 'alphabetical'
    comments = 'comments'
    date = 'date'
    default = 'default'
    duration = 'duration'
    likes = 'likes'
    manual = 'manual'
    modified_time = 'modified_time'
    plays = 'plays'


class UsersUserIdAlbumsAlbumIdVideosPutRequest(BaseModel):
    videos: str = Field(
        ...,
        description='A comma-separated list of video URIs.',
        examples=['/videos/258684937,/videos/273576296'],
    )


class UsersUserIdAlbumsAlbumIdVideosVideoIdSetAlbumThumbnailPostRequest(BaseModel):
    time_code: Optional[float] = Field(
        None,
        description='The video frame time in seconds to use as the album thumbnail.',
        examples=[300],
    )


class Sort84(Enum):
    alphabetical = 'alphabetical'
    comments = 'comments'
    date = 'date'
    duration = 'duration'
    likes = 'likes'
    plays = 'plays'


class Sort86(Enum):
    alphabetical = 'alphabetical'
    date = 'date'
    name = 'name'


class Filter54(Enum):
    moderated = 'moderated'


class Sort88(Enum):
    alphabetical = 'alphabetical'
    date = 'date'
    followers = 'followers'
    videos = 'videos'


class UsersUserIdCustomlogosGetResponse(RootModel[List[Picture]]):
    root: List[Picture]


class Type17(Enum):
    appears = 'appears'
    category_featured = 'category_featured'
    channel = 'channel'
    facebook_feed = 'facebook_feed'
    following = 'following'
    group = 'group'
    likes = 'likes'
    ondemand_publish = 'ondemand_publish'
    share = 'share'
    tagged_with = 'tagged_with'
    twitter_timeline = 'twitter_timeline'
    uploads = 'uploads'


class Sort90(Enum):
    alphabetical = 'alphabetical'
    date = 'date'


class UsersUserIdFollowersGetResponse(RootModel[List[User]]):
    root: List[User]


class Filter56(Enum):
    online = 'online'


class UsersUserIdFollowingGetResponse(RootModel[List[User]]):
    root: List[User]


class UsersUserIdFollowingPostRequest(BaseModel):
    users: List[str] = Field(
        ..., description='An array of user URIs for the list of users to follow.'
    )


class Filter58(Enum):
    moderated = 'moderated'


class Sort94(Enum):
    alphabetical = 'alphabetical'
    date = 'date'
    members = 'members'
    videos = 'videos'


class Filter60(Enum):
    embeddable = 'embeddable'


class Sort96(Enum):
    alphabetical = 'alphabetical'
    comments = 'comments'
    date = 'date'
    duration = 'duration'
    likes = 'likes'
    plays = 'plays'


class Filter62(Enum):
    film = 'film'
    series = 'series'


class Sort98(Enum):
    added = 'added'
    alphabetical = 'alphabetical'
    date = 'date'
    modified_time = 'modified_time'
    name = 'name'
    publish_time = 'publish.time'
    rating = 'rating'


class Price7(BaseModel):
    AUD: Optional[float] = Field(
        None, description='The purchase price of this video in AUD.', examples=[2.99]
    )
    CAD: Optional[float] = Field(
        None, description='The purchase price of this video in CAD.', examples=[2.99]
    )
    CHF: Optional[float] = Field(
        None, description='The purchase price of this video in CHF.', examples=[2.99]
    )
    DKK: Optional[float] = Field(
        None, description='The purchase price of this video in DKK.', examples=[2.99]
    )
    EUR: Optional[float] = Field(
        None, description='The purchase price of this video in EUR.', examples=[2.99]
    )
    GBP: Optional[float] = Field(
        None, description='The purchase price of this video in GBP.', examples=[2.99]
    )
    JPY: Optional[float] = Field(
        None, description='The purchase price of this video in JPY.', examples=[2.99]
    )
    KRW: Optional[float] = Field(
        None, description='The purchase price of this video in KRW.', examples=[2.99]
    )
    NOK: Optional[float] = Field(
        None, description='The purchase price of this video in NOK.', examples=[2.99]
    )
    PLN: Optional[float] = Field(
        None, description='The purchase price of this video in PLN.', examples=[2.99]
    )
    SEK: Optional[float] = Field(
        None, description='The purchase price of this video in SEK.', examples=[2.99]
    )
    USD: Optional[float] = Field(
        None,
        description='The purchase price of this video in USD when `type` is `film`, or the purchase price of the entire collection in USD when `type` is `series`.',
        examples=[2.99],
    )


class Buy7(BaseModel):
    active: Optional[bool] = Field(
        None,
        description='Whether the Buy action is active. *Required if `rent.active` is false.',
        examples=['true'],
    )
    download: Optional[bool] = Field(
        None,
        description='Whether people who buy the video can download it. To use this field, `type` must be `film`.',
        examples=['true'],
    )
    price: Optional[Price7] = None


class Price8(BaseModel):
    USD: Optional[float] = Field(
        None,
        description='The purchase price per episode. *Required if `episodes.buy.active` is true.',
        examples=[1.99],
    )


class Buy8(BaseModel):
    active: Optional[bool] = Field(
        None, description='Whether episodes can be bought.', examples=['true']
    )
    download: Optional[bool] = Field(
        None,
        description='Whether people who buy the episode can download it. To use this field, `type` must be `series`.',
        examples=['true'],
    )
    price: Optional[Price8] = None


class Price9(BaseModel):
    USD: Optional[float] = Field(
        None,
        description='The default price to rent an episode. This field is applicable only when `type` is `series`. *Required if `episodes.rent.active` is true.',
        examples=[0.99],
    )


class Rent6(BaseModel):
    active: Optional[bool] = Field(
        None, description='Whether episodes can be rented', examples=['true']
    )
    period: Optional[Period1] = Field(
        None, description='The period in which this episode can be rented for.'
    )
    price: Optional[Price9] = None


class Episodes2(BaseModel):
    buy: Optional[Buy8] = None
    rent: Optional[Rent6] = None


class Price10(BaseModel):
    AUD: Optional[float] = Field(
        None, description='The rental price of this video in AUD.', examples=[0.99]
    )
    CAD: Optional[float] = Field(
        None, description='The rental price of this video in CAD.', examples=[0.99]
    )
    CHF: Optional[float] = Field(
        None, description='The rental price of this video in CHF.', examples=[0.99]
    )
    DKK: Optional[float] = Field(
        None, description='The rental price of this video in DKK.', examples=[0.99]
    )
    EUR: Optional[float] = Field(
        None, description='The rental price of this video in EUR.', examples=[0.99]
    )
    GBP: Optional[float] = Field(
        None, description='The rental price of this video in GBP.', examples=[0.99]
    )
    JPY: Optional[float] = Field(
        None, description='The rental price of this video in JPY.', examples=[0.99]
    )
    KRW: Optional[float] = Field(
        None, description='The rental price of this video in KRW.', examples=[0.99]
    )
    NOK: Optional[float] = Field(
        None, description='The rental price of this video in NOK.', examples=[0.99]
    )
    PLN: Optional[float] = Field(
        None, description='The rental price of this video in PLN.', examples=[0.99]
    )
    SEK: Optional[float] = Field(
        None, description='The rental price of this video in SEK.', examples=[0.99]
    )
    USD: Optional[float] = Field(
        None,
        description='The rental price of this video in USD when `type` is `film`, or the rental price of the entire collection in USD when `type` is `series`.',
        examples=[0.99],
    )


class Rent7(BaseModel):
    active: Optional[bool] = Field(
        None,
        description='Whether the video can be rented. *Required if `buy.active` is false.',
        examples=['true'],
    )
    period: Optional[Period1] = Field(
        None, description='The period in which this can be rented for.'
    )
    price: Optional[Price10] = None


class Price11(BaseModel):
    USD: Optional[float] = Field(
        None,
        description='The monthly subscription price in USD. *Required if `subscription.active` is true.',
        examples=[9.99],
    )


class Monthly1(BaseModel):
    active: Optional[bool] = Field(
        None,
        description='Whether monthly subscription is active. *Required if `rent.active` and `buy.active` are false.',
        examples=['true'],
    )
    price: Optional[Price11] = None


class Subscription2(BaseModel):
    monthly: Optional[Monthly1] = None


class Type19(Enum):
    film = 'film'
    series = 'series'


class UsersUserIdOndemandPagesPostRequest(BaseModel):
    accepted_currencies: Optional[AcceptedCurrencies] = Field(
        None,
        description='An array of accepted currencies.\n\nOption descriptions:\n * `AUD` - Australian Dollar\n * `CAD` - Canadian Dollar\n * `CHF` - Swiss Franc\n * `DKK` - Danish Krone\n * `EUR` - Euro\n * `GBP` - British Pound\n * `JPY` - Japanese Yen\n * `KRW` - South Korean Won\n * `NOK` - Norwegian Krone\n * `PLN` - Polish Zloty\n * `SEK` - Swedish Krona\n * `USD` - US Dollar\n',
    )
    buy: Optional[Buy7] = None
    content_rating: ContentRating1 = Field(
        ...,
        description='One or more ratings, either as a comma-separated list or as a JSON array depending on the request format.',
    )
    description: str = Field(
        ...,
        description='The description of the On Demand page.',
        examples=[
            'DARBY FOREVER follows the fantasies of Darby, a shopgirl at "Bobbins & Notions".'
        ],
    )
    domain_link: Optional[str] = Field(
        None,
        description='The custom domain of the On Demand page.',
        examples=['https://example.com'],
    )
    episodes: Optional[Episodes2] = None
    link: Optional[str] = Field(
        None,
        description="The custom string to use in this On Demand page's Vimeo URL.",
        examples=['darbyforever'],
    )
    name: str = Field(
        ..., description='The name of the On Demand page.', examples=['Darby Forever']
    )
    rent: Optional[Rent7] = None
    subscription: Optional[Subscription2] = None
    type: Type19 = Field(..., description='The type of On Demand page.')


class UsersUserIdPicturesGetResponse(RootModel[List[Picture]]):
    root: List[Picture]


class UsersUserIdPicturesPortraitsetIdPatchRequest(BaseModel):
    active: Optional[bool] = Field(
        None,
        description="Whether the picture is the user's active portrait.",
        examples=['true'],
    )


class Sort100(Enum):
    alphabetical = 'alphabetical'
    date = 'date'


class UsersUserIdPortfoliosGetResponse(RootModel[List[Portfolio]]):
    root: List[Portfolio]


class Filter64(Enum):
    embeddable = 'embeddable'


class Sort102(Enum):
    alphabetical = 'alphabetical'
    comments = 'comments'
    date = 'date'
    default = 'default'
    likes = 'likes'
    manual = 'manual'
    plays = 'plays'


class UsersUserIdPresetsPresetIdPatchRequest(BaseModel):
    outro: Optional[Outro1] = Field(None, description='Disable the outro.')


class Sort104(Enum):
    date = 'date'
    default = 'default'
    modified_time = 'modified_time'
    name = 'name'


class UsersUserIdProjectsPostRequest(BaseModel):
    name: str = Field(
        ..., description='The name of the project.', examples=['Rough cuts']
    )


class UsersUserIdProjectsProjectIdPatchRequest(BaseModel):
    name: str = Field(
        ..., description='The name of the project.', examples=['Rough cuts']
    )


class Sort106(Enum):
    alphabetical = 'alphabetical'
    date = 'date'
    default = 'default'
    duration = 'duration'
    last_user_action_event_date = 'last_user_action_event_date'


class Filter66(Enum):
    app_only = 'app_only'
    embeddable = 'embeddable'
    featured = 'featured'
    playable = 'playable'


class Sort108(Enum):
    alphabetical = 'alphabetical'
    comments = 'comments'
    date = 'date'
    default = 'default'
    duration = 'duration'
    last_user_action_event_date = 'last_user_action_event_date'
    likes = 'likes'
    modified_time = 'modified_time'
    plays = 'plays'


class Logos3(BaseModel):
    custom: Optional[Custom1] = None
    vimeo: Optional[bool] = Field(
        None, description='Show or hide the Vimeo logo.', examples=['true']
    )


class Title2(BaseModel):
    name: Optional[Name] = Field(
        None,
        description='Show or hide the video title, or enable the user to determine whether the video title appears.',
    )
    owner: Optional[Owner] = Field(
        None,
        description='Show or hide the owner information, or enable the user to determine whether the owner information appears.',
    )
    portrait: Optional[Portrait] = Field(
        None,
        description='Show or hide the owner portrait, or enable the user to determine whether the owner portrait appears.',
    )


class Embed7(BaseModel):
    buttons: Optional[Buttons2] = None
    color: Optional[str] = Field(
        None, description='The main color of the embed player.', examples=['#1ab7ea']
    )
    logos: Optional[Logos3] = None
    playbar: Optional[bool] = Field(
        None, description='Show or hide the playbar.', examples=['true']
    )
    title: Optional[Title2] = None
    volume: Optional[bool] = Field(
        None, description='Show or hide the volume selector.', examples=['true']
    )


class Embed8(Enum):
    private = 'private'
    public = 'public'
    whitelist = 'whitelist'


class Privacy14(BaseModel):
    add: Optional[bool] = Field(
        None,
        description='Whether a user can add the video to an album, channel, or group.',
        examples=['true'],
    )
    comments: Optional[Comments3] = Field(
        None, description='The privacy level required to comment on the video.'
    )
    download: Optional[bool] = Field(
        None,
        description='Whether a user can download the video. Not available to users with a Basic membership',
        examples=['true'],
    )
    embed: Optional[Embed8] = Field(
        None,
        description="The video's embed settings. The `whitelist` value enables you to define all valid embed domains. See our [documentation](https://developer.vimeo.com/api/endpoints/videos#/{video_id}/privacy/domains) for details on adding and removing domains.",
    )
    view: Optional[View3] = Field(
        None,
        description="The video's privacy setting. When privacy is `users`, `application/json` is the only valid content type. Basic users can't set privacy to `unlisted`.",
    )


class Reason2(Enum):
    at = 'at'
    bn = 'bn'
    n = 'n'
    sl = 'sl'
    ss = 'ss'
    v = 'v'


class Mpaa1(BaseModel):
    reason: Optional[Reason2] = Field(
        None,
        description="The reason for the video's MPAA rating.\n\nOption descriptions:\n * `at` - Adult themes\n * `bn` - Brief nudity\n * `n` - Nudity\n * `sl` - Strong language\n * `ss` - Sexual situations\n * `v` - Violence\n",
    )


class Reason3(Enum):
    d = 'd'
    fv = 'fv'
    l = 'l'
    ss = 'ss'
    v = 'v'


class Tv1(BaseModel):
    reason: Optional[Reason3] = Field(
        None,
        description="The reason for the video's TV rating.\n\nOption descriptions:\n * `d` - Suggestive dialogue\n * `fv` - Fantasy violence\n * `l` - Language\n * `ss` - Sexual situations\n * `v` - Violence\n",
    )


class Ratings1(BaseModel):
    mpaa: Optional[Mpaa1] = None
    tv: Optional[Tv1] = None


class Spatial2(BaseModel):
    director_timeline: Optional[List[DirectorTimelineItem1]] = Field(
        None, description='The 360 director timeline.'
    )
    field_of_view: Optional[float] = Field(
        None,
        description='The 360 field of view: default 50, minimum 30, maximum 90.',
        examples=[50],
    )
    projection: Optional[Projection] = Field(
        None, description='The 360 spatial projection.'
    )
    stereo_format: Optional[StereoFormat] = Field(
        None, description='The 360 spatial stereo format.'
    )


class Upload3(BaseModel):
    approach: Approach = Field(..., description='The upload approach.')
    link: Optional[str] = Field(
        None,
        description='The public URL at which the video is hosted. The URL must be valid for at least 24 hours. Use this parameter when `approach` is `pull`.',
        examples=['https://example.com/video.mp4'],
    )
    redirect_url: Optional[str] = Field(
        None,
        description="The app's redirect URL. Use this parameter when `approach` is `post`.",
        examples=['https://example.com'],
    )
    size: Optional[str] = Field(
        None,
        description='The size in bytes of the video to upload.',
        examples=['13623861'],
    )


class UsersUserIdVideosPostRequest(BaseModel):
    content_rating: Optional[List[str]] = Field(
        None,
        description='A list of values describing the content in this video. Find the full list in the [/contentratings](https://developer.vimeo.com/api/endpoints/videos#GET/contentratings) endpoint.',
    )
    description: Optional[str] = Field(
        None,
        description='The description of the video.',
        examples=['A celebration of 10 years of Staff Picks.'],
    )
    embed: Optional[Embed7] = None
    license: Optional[License] = Field(
        None, description='The Creative Commons license.'
    )
    locale: Optional[str] = Field(
        None,
        description="The video's default language. For a full list of valid languages, use the [/languages?filter=texttracks](https://developer.vimeo.com/api/endpoints/videos#GET/languages) endpoint.",
        examples=['en_US'],
    )
    name: Optional[str] = Field(
        None,
        description='The title of the video.',
        examples=['Celebrating 10 Years of Staff Picks'],
    )
    password: Optional[str] = Field(
        None,
        description='The password. When you set `privacy.view` to `password`, you must provide the password as an additional parameter.',
        examples=['hunter1'],
    )
    privacy: Optional[Privacy14] = None
    ratings: Optional[Ratings1] = None
    review_page: Optional[ReviewPage] = None
    spatial: Optional[Spatial2] = None
    upload: Upload3


class Filter68(Enum):
    embeddable = 'embeddable'


class Sort110(Enum):
    alphabetical = 'alphabetical'
    comments = 'comments'
    date = 'date'
    duration = 'duration'
    likes = 'likes'
    plays = 'plays'


class Filter70(Enum):
    CC = 'CC'
    CC_BY = 'CC-BY'
    CC_BY_NC = 'CC-BY-NC'
    CC_BY_NC_ND = 'CC-BY-NC-ND'
    CC_BY_NC_SA = 'CC-BY-NC-SA'
    CC_BY_ND = 'CC-BY-ND'
    CC_BY_SA = 'CC-BY-SA'
    CC0 = 'CC0'
    categories = 'categories'
    duration = 'duration'
    in_progress = 'in-progress'
    minimum_likes = 'minimum_likes'
    trending = 'trending'
    upload_date = 'upload_date'


class Sort112(Enum):
    alphabetical = 'alphabetical'
    comments = 'comments'
    date = 'date'
    duration = 'duration'
    likes = 'likes'
    plays = 'plays'
    relevant = 'relevant'


class Logos4(BaseModel):
    custom: Optional[Custom1] = None
    vimeo: Optional[bool] = Field(
        None, description='Show or hide the Vimeo logo.', examples=['true']
    )


class Title3(BaseModel):
    name: Optional[Name] = Field(
        None,
        description='Show or hide the video title, or enable the user to determine whether the video title appears.',
    )
    owner: Optional[Owner] = Field(
        None,
        description='Show or hide the owner information, or enable the user to determine whether the owner information appears.',
    )
    portrait: Optional[Portrait] = Field(
        None,
        description='Show or hide the owner portrait, or enable the user to determine whether the owner portrait appears.',
    )


class Embed9(BaseModel):
    buttons: Optional[Buttons2] = None
    color: Optional[str] = Field(
        None, description='The main color of the embed player.', examples=['#1ab7ea']
    )
    logos: Optional[Logos4] = None
    playbar: Optional[bool] = Field(
        None, description='Show or hide the playbar.', examples=['true']
    )
    title: Optional[Title3] = None
    volume: Optional[bool] = Field(
        None, description='Show or hide the volume selector.', examples=['true']
    )


class Embed10(Enum):
    private = 'private'
    public = 'public'
    whitelist = 'whitelist'


class Privacy15(BaseModel):
    add: Optional[bool] = Field(
        None,
        description='Whether a user can add the video to an album, channel, or group.',
        examples=['true'],
    )
    comments: Optional[Comments3] = Field(
        None, description='The privacy level required to comment on the video.'
    )
    download: Optional[bool] = Field(
        None,
        description='Whether a user can download the video. Not available to users with a Basic membership.',
        examples=['true'],
    )
    embed: Optional[Embed10] = Field(
        None,
        description="The video's new embed settings. The `whitelist` value enables you to define all valid embed domains. See our [documentation](https://developer.vimeo.com/api/endpoints/videos#/{video_id}/privacy/domains) for details on adding and removing domains.",
    )
    view: Optional[View3] = Field(
        None,
        description="The video's new privacy setting. When privacy is `users`, `application/json` is the only valid content type. Basic users can't set privacy to `unlisted`.",
    )


class Reason4(Enum):
    at = 'at'
    bn = 'bn'
    n = 'n'
    sl = 'sl'
    ss = 'ss'
    v = 'v'


class Mpaa2(BaseModel):
    reason: Optional[Reason4] = Field(
        None,
        description="The reason for the video's MPAA rating.\n\nOption descriptions:\n * `at` - Adult themes\n * `bn` - Brief nudity\n * `n` - Nudity\n * `sl` - Strong language\n * `ss` - Sexual situations\n * `v` - Violence\n",
    )


class Reason5(Enum):
    d = 'd'
    fv = 'fv'
    l = 'l'
    ss = 'ss'
    v = 'v'


class Tv2(BaseModel):
    reason: Optional[Reason5] = Field(
        None,
        description="The reason for the video's TV rating.\n\nOption descriptions:\n * `d` - Suggestive dialogue\n * `fv` - Fantasy violence\n * `l` - Language\n * `ss` - Sexual situations\n * `v` - Violence\n",
    )


class Ratings2(BaseModel):
    mpaa: Optional[Mpaa2] = None
    tv: Optional[Tv2] = None


class Spatial3(BaseModel):
    director_timeline: Optional[List[DirectorTimelineItem1]] = Field(
        None, description='The 360 director timeline.'
    )
    field_of_view: Optional[float] = Field(
        None,
        description='The 360 field of view: default 50, minimum 30, maximum 90.',
        examples=[50],
    )
    projection: Optional[Projection] = Field(
        None, description='The 360 spatial projection.'
    )
    stereo_format: Optional[StereoFormat] = Field(
        None, description='The 360 spatial stereo format.'
    )


class VideosVideoIdPatchRequest(BaseModel):
    content_rating: Optional[List[str]] = Field(
        None,
        description='A list of values describing the content in this video. You can find the full list in the [`/contentratings`](https://developer.vimeo.com/api/endpoints/videos#GET/contentratings) endpoint.',
    )
    description: Optional[str] = Field(
        None,
        description='The new description of the video.',
        examples=['A celebration of 10 years of Staff Picks.'],
    )
    embed: Optional[Embed9] = None
    license: Optional[License] = Field(
        None, description='The Creative Commons license.'
    )
    locale: Optional[str] = Field(
        None,
        description="The video's default language. For a full list of valid languages, use the [/languages?filter=texttracks](https://developer.vimeo.com/api/endpoints/videos#GET/languages) endpoint.",
        examples=['en-US'],
    )
    name: Optional[str] = Field(
        None,
        description='The new title for the video.',
        examples=['Celebrating 10 Years of Staff Picks'],
    )
    password: Optional[str] = Field(
        None,
        description='The password. When you set `privacy.view` to `password`, you must provide the password as an additional parameter.',
        examples=['hunter1'],
    )
    privacy: Optional[Privacy15] = None
    ratings: Optional[Ratings2] = None
    review_page: Optional[ReviewPage] = None
    spatial: Optional[Spatial3] = None


class VideosVideoIdCategoriesPutRequest(BaseModel):
    category: List[str] = Field(
        ...,
        description="The array of the names of the categories that you're suggesting.",
    )


class VideosVideoIdCommentsPostRequest(BaseModel):
    text: str = Field(
        ..., description='The text of the comment.', examples=['I love this!']
    )


class VideosVideoIdCommentsCommentIdPatchRequest(BaseModel):
    text: str = Field(
        ..., description='The next text of the comment.', examples=['I love this!']
    )


class VideosVideoIdCommentsCommentIdRepliesPostRequest(BaseModel):
    text: str = Field(
        ..., description='The reply to the comment.', examples=['I love this!']
    )


class Sort114(Enum):
    alphabetical = 'alphabetical'
    date = 'date'


class VideosVideoIdCreditsPostRequest(BaseModel):
    email: str = Field(
        ...,
        description='The email address of the credited person.',
        examples=['user@example.com'],
    )
    name: str = Field(
        ..., description='The name of the credited person.', examples=['Sam Doe']
    )
    role: str = Field(
        ..., description='The role of the credited person.', examples=['Producer']
    )
    user_uri: str = Field(
        ...,
        description='The URI of the Vimeo user who should be given credit in this video.',
        examples=['/users/152184'],
    )


class VideosVideoIdCreditsCreditIdPatchRequest(BaseModel):
    name: Optional[str] = Field(
        None, description='The name of the person being credited.', examples=['Sam Doe']
    )
    role: Optional[str] = Field(
        None,
        description='The role of the person being credited.',
        examples=['Producer'],
    )


class VideosVideoIdLikesGetResponse(RootModel[List[User]]):
    root: List[User]


class VideosVideoIdPicturesGetResponse(RootModel[List[Picture]]):
    root: List[Picture]


class VideosVideoIdPicturesPostRequest(BaseModel):
    active: Optional[bool] = Field(
        None,
        description='Whether the image created by the `time` field should be the default thumbnail for the video.',
        examples=['true'],
    )
    time: Optional[float] = Field(
        None,
        description='Creates an image of the video from the given time offset.',
        examples=[300],
    )


class VideosVideoIdPicturesPictureIdPatchRequest(BaseModel):
    active: Optional[bool] = Field(
        None, description='Whether this thumbnail is the default.', examples=['true']
    )


class VideosVideoIdPrivacyDomainsGetResponse(RootModel[List[Domain]]):
    root: List[Domain]


class VideosVideoIdPrivacyUsersGetResponse(RootModel[List[User]]):
    root: List[User]


class VideosVideoIdPrivacyUsersPutResponse(RootModel[List[User]]):
    root: List[User]


class VideosVideoIdTagsGetResponse(RootModel[List[Tag]]):
    root: List[Tag]


class VideosVideoIdTagsPutRequest(BaseModel):
    name: str = Field(
        ...,
        description='The name of the tag to apply. See our documentation on [batch requests](https://developer.vimeo.com/api/common-formats#batch-requests) for more information.',
        examples=['awesome'],
    )
    page: Optional[float] = Field(
        None, description='The page number of the results to show.', examples=[1]
    )
    per_page: Optional[float] = Field(
        None,
        description='The number of items to show on each page of results, up to a maximum of 100.',
        examples=[10],
    )


class VideosVideoIdTagsPutResponse(RootModel[List[Tag]]):
    root: List[Tag]


class VideosVideoIdTexttracksGetResponse(RootModel[List[TextTrack]]):
    root: List[TextTrack]


class Type20(Enum):
    captions = 'captions'
    chapters = 'chapters'
    descriptions = 'descriptions'
    metadata = 'metadata'
    subtitles = 'subtitles'


class VideosVideoIdTexttracksPostRequest(BaseModel):
    active: Optional[bool] = Field(
        None,
        description='Active text tracks appear in the player and are visible to other users. Only one text track per language can be active.',
        examples=['true'],
    )
    language: str = Field(
        ...,
        description='The language of the text track. For a complete list of valid languages, use the [/languages?filter=texttracks](https://developer.vimeo.com/api/endpoints/videos#GET/languages) endpoint.',
        examples=['en-US'],
    )
    name: str = Field(
        ..., description='The name of the text track.', examples=['Commentary']
    )
    type: Type20 = Field(..., description='The type of the text track.')


class VideosVideoIdTexttracksTexttrackIdPatchRequest(BaseModel):
    active: Optional[bool] = Field(
        None,
        description='Whether the text track is active, meaning that it appears in the player. Only one text track per language, and type, can be active.',
        examples=['true'],
    )
    language: Optional[str] = Field(
        None,
        description='The language of the text track. For a full list of valid languages, use the [/languages?filter=texttracks](https://developer.vimeo.com/api/endpoints/videos#GET/languages) endpoint.',
        examples=['en-US'],
    )
    name: Optional[str] = Field(
        None, description='The name of the text track.', examples=['Commentary']
    )
    type: Optional[Type20] = Field(None, description='The text track type.')


class Upload4(BaseModel):
    approach: Approach = Field(..., description='Upload approach')
    link: Optional[str] = Field(
        None,
        description='If your upload approach is pull, Vimeo will download the video hosted at this public URL. This URL must be valid for at least 24 hours.',
        examples=['https://example.com'],
    )
    redirect_url: Optional[str] = Field(
        None,
        description="The app's redirect URL. Use this parameter when `approach` is `post`.",
        examples=['https://example.com'],
    )
    size: Optional[str] = Field(None, description='Upload size', examples=['13623861'])


class VideosVideoIdVersionsPostRequest(BaseModel):
    file_name: str = Field(
        ..., description='The name of the version', examples=['untitled.mp4']
    )
    upload: Upload4


class Filter72(Enum):
    related = 'related'


class Album(BaseModel):
    allow_continuous_play: bool = Field(
        ...,
        description='Whether an album should allow continuous play.',
        examples=['true'],
    )
    allow_downloads: bool = Field(
        ..., description='Whether an album should allow downloads.', examples=['true']
    )
    allow_share: bool = Field(
        ..., description='Whether an album should allow sharing.', examples=['true']
    )
    brand_color: str = Field(
        ...,
        description='Hexadecimal color code for the decorative color. For example, album videos use this color for player buttons.',
        examples=['ff66ee'],
    )
    created_time: str = Field(
        ...,
        description='The time in ISO 8601 format that the album was created.',
        examples=['2015-12-17T21:32:44+00:00'],
    )
    custom_logo: Picture = Field(..., description='The custom logo for this album.')
    description: str = Field(
        ...,
        description="A brief description of the album's content.",
        examples=['Vimeo holiday videos!'],
    )
    domain: str = Field(
        ...,
        description='The custom domain a user has selected for their album.',
        examples=['mycustomdomain.com'],
    )
    duration: float = Field(
        ...,
        description='The total duration in seconds of all the videos in the album.',
        examples=[1163],
    )
    embed: Embed = Field(..., description='Embed data for the album.')
    embed_brand_color: bool = Field(
        ...,
        description="Whether to show the album's custom brand color in the player of the album's embedded playlist.",
        examples=['true'],
    )
    embed_custom_logo: bool = Field(
        ...,
        description="Whether to show the album's custom logo in the player of the album's embedded playlist.",
        examples=['true'],
    )
    hide_nav: bool = Field(
        ...,
        description='Whether to hide the Vimeo navigation when viewing the album.',
        examples=['true'],
    )
    hide_vimeo_logo: bool = Field(
        ...,
        description="Whether to hide the Vimeo logo in the player of the album's embedded playlist.",
        examples=['true'],
    )
    layout: Layout = Field(
        ..., description="The album's layout preference", examples=['grid']
    )
    link: str = Field(
        ...,
        description='The URL to access the album.',
        examples=['https://vimeo.com/album/Vimeo Holiday Videos!'],
    )
    metadata: Metadata1 = Field(..., description='Metadata about the album.')
    modified_time: str = Field(
        ...,
        description='The time in ISO 8601 format when the album was last modified.',
        examples=['2018-02-06T21:24:17+00:00'],
    )
    name: str = Field(
        ..., description="The album's display name.", examples=['Vimeo Holiday Videos!']
    )
    pictures: Picture = Field(
        ...,
        description='The active image for the album; defaults to the thumbnail of the last video added to the album.',
    )
    privacy: Privacy = Field(..., description='The privacy settings of the album.')
    resource_key: str = Field(
        ...,
        description='The album resource key.',
        examples=['e5595241643259c658ed6c85ca82985a6341edc7'],
    )
    review_mode: bool = Field(
        ...,
        description='Whether album videos should use the review mode URL.',
        examples=['true'],
    )
    sort: Sort = Field(
        ..., description='Sort type of the album.', examples=['added_first']
    )
    theme: Theme = Field(
        ..., description="The album's color theme preference", examples=['dark']
    )
    uri: str = Field(..., description="The album's URI.", examples=['/albums/3706071'])
    url: str = Field(
        ...,
        description='The custom Vimeo URL a user has selected for their album.',
        examples=['my-custom-url'],
    )
    use_custom_domain: bool = Field(
        ...,
        description='Whether the user has opted in to use a custom domain for their album.',
        examples=['false'],
    )
    user: User = Field(..., description='The owner of the album.')
    web_brand_color: bool = Field(
        ...,
        description='Whether an album should show the brand color in the web layout.',
        examples=['true'],
    )
    web_custom_logo: bool = Field(
        ...,
        description="Whether an album's custom logo should be shown in the web layout.",
        examples=['true'],
    )


class Auth(BaseModel):
    access_token: str = Field(
        ...,
        description='The access token string.',
        examples=['01019a4a62aec63db077317ab7bb429db75652401e'],
    )
    app: ApiApp = Field(
        ..., description='The API application associated with the token.'
    )
    expires_on: Optional[str] = Field(
        None,
        description='The date and time that the token expires.',
        examples=['1495048954'],
    )
    refresh_token: Optional[str] = Field(
        None,
        description='The refresh token string.',
        examples=['3d3bc8a9cb7debfd01b270e419b2d265983362f9'],
    )
    scope: str = Field(
        ...,
        description='The scope or scopes that the token supports.',
        examples=['private create edit upload public'],
    )
    token_type: TokenType = Field(
        ...,
        description='The token type:\n\nOption descriptions:\n * `bearer` - The token is of the `bearer` type.\n',
        examples=['bearer'],
    )
    user: Optional[User] = Field(
        None, description='The user associated with the token.'
    )


class Category(BaseModel):
    icon: Optional[Picture] = Field(
        None, description='The active icon for the category.'
    )
    last_video_featured_time: str = Field(
        ...,
        description='The last time, in ISO 8601 format, that a video was featured.',
        examples=['2017-05-17T17:46:09+00:00'],
    )
    link: str = Field(
        ...,
        description='The URL to access the category in a browser.',
        examples=['https://vimeo.com/categories/animation'],
    )
    metadata: Metadata2 = Field(..., description='Metadata about the category.')
    name: str = Field(
        ...,
        description='The display name that identifies the category.',
        examples=['Animation'],
    )
    parent: Parent = Field(
        ...,
        description="The container of this category's parent category, if the current category is a subcategory.",
    )
    pictures: Picture = Field(
        ...,
        description='The active picture for this category; defaults to vertical color bars.',
    )
    resource_key: str = Field(
        ...,
        description='The resource key of the category.',
        examples=['e5595241643259c658ed6c85ca82985a6341edc7'],
    )
    subcategories: Optional[List[Subcategory]] = Field(
        None,
        description='All the subcategories that belong to this category, if the current category is a top-level parent.',
    )
    top_level: bool = Field(
        ...,
        description="Whether the category isn't a subcategory of another category.",
        examples=['true'],
    )
    uri: str = Field(
        ...,
        description='The unique identifier to access the category resource.',
        examples=['/categories/animation'],
    )


class Channel(BaseModel):
    categories: List[Category] = Field(
        ...,
        description='The categories to which this channel belongs as specified by the channel moderators.',
    )
    created_time: str = Field(
        ...,
        description='The time in ISO 8601 format when the channel was created.',
        examples=['2007-10-23T17:00:43+00:00'],
    )
    description: str = Field(
        ...,
        description="A brief explanation of the channel's content.",
        examples=[
            'We really love videos, and these are the videos we really, really love.'
        ],
    )
    header: Picture = Field(
        ...,
        description='The banner that appears by default at the top of the channel page.',
    )
    link: str = Field(
        ...,
        description='The URL to access the channel in a browser.',
        examples=['https://vimeo.com/channels/staffpicks'],
    )
    metadata: Metadata3 = Field(..., description='Metadata about the channel.')
    modified_time: str = Field(
        ...,
        description='The time in ISO 8601 format when the album was last modified.',
        examples=['2018-03-21T22:52:29+00:00'],
    )
    name: str = Field(
        ...,
        description='The display name that identifies the channel.',
        examples=['Vimeo Staff Picks'],
    )
    pictures: Picture = Field(
        ...,
        description='The active image for the channel; defaults to the thumbnail of the last video added to the channel.',
    )
    privacy: Privacy1 = Field(..., description='The privacy settings of the channel.')
    resource_key: str = Field(
        ...,
        description='The channel resource key.',
        examples=['e5595241643259c658ed6c85ca82985a6341edc7'],
    )
    tags: List[Tag] = Field(
        ..., description='An array of all tags assigned to this channel.'
    )
    uri: str = Field(
        ...,
        description='The unique identifier to access the channel resource.',
        examples=['/channels/927'],
    )
    user: User = Field(..., description='The Vimeo user who owns the channel.')


class Comment(BaseModel):
    created_on: str = Field(
        ...,
        description='The time in ISO 8601 format when the comment was posted.',
        examples=['2018-03-05T21:04:47+00:00'],
    )
    metadata: Metadata4
    resource_key: str = Field(
        ...,
        description='The resource key string for the comment.',
        examples=['bac1033deba2310ebba2caec33c23e4beea67aba'],
    )
    text: str = Field(
        ..., description='The content of the comment.', examples=['I love this!']
    )
    type: Type2 = Field(
        ...,
        description='The Vimeo content to which the comment relates:\n\nOption descriptions:\n * `video` - The comment is about a video.\n',
        examples=['video'],
    )
    uri: str = Field(
        ...,
        description='The unique identifier to access the comment resource.',
        examples=['/videos/258684937/comments/12345'],
    )
    user: User = Field(..., description='The user who posted the comment.')


class Group(BaseModel):
    created_time: str = Field(
        ...,
        description='The time in ISO 8601 format when the group was created.',
        examples=['2008-07-05T14:52:43+00:00'],
    )
    description: str = Field(
        ...,
        description="The group's description.",
        examples=[
            'Want to participate in our weekly Challenges? Join the Group to receive messages and new Challenges!'
        ],
    )
    link: str = Field(
        ...,
        description='The link to the group.',
        examples=['https://vimeo.com/groups/weekendchallenge'],
    )
    metadata: Metadata5 = Field(..., description='Metadata about the group.')
    modified_time: str = Field(
        ...,
        description='The time in ISO 8601 format when the group was last modified.',
        examples=['2018-09-16T15:41:45+00:00'],
    )
    name: str = Field(
        ...,
        description="The group's display name.",
        examples=['Vimeo Weekend Challenge'],
    )
    pictures: Picture = Field(..., description='The active picture for this group.')
    privacy: Privacy2 = Field(..., description="The group's privacy settings.")
    resource_key: str = Field(
        ...,
        description='The resource key of the group.',
        examples=['dc724af18fbdd4e59189f5fe768a5f8311527050'],
    )
    uri: str = Field(
        ...,
        description='The canonical relative URI of this group.',
        examples=['/groups/1108'],
    )
    user: Optional[User] = Field(None, description='The owner of the group.')


class Metadata7(BaseModel):
    connections: Connections7 = Field(
        ...,
        description='A collection of information that is connected to this resource, including videos, genres, and pictures connections.',
    )
    interactions: PurchaseInteraction = Field(
        ..., description="The user's available purchase interactions."
    )


class OnDemandSeason(BaseModel):
    description: str = Field(
        ..., description='The description for this season.', examples=['Season 1']
    )
    metadata: Metadata10
    name: str = Field(
        ..., description='The descriptive name of the season.', examples=['Season 1']
    )
    position: float = Field(
        ...,
        description='The position of the season relative to other seasons in the series.',
        examples=[1],
    )
    resource_key: str = Field(
        ...,
        description='The unique identifier for this On Demand season.',
        examples=['bac1033deba2310ebba2caec33c23e4beea67aba'],
    )
    type: str = Field(..., description='The type of season.', examples=['main'])
    uri: str = Field(
        ...,
        description="The season container's relative URI.",
        examples=['/ondemand/pages/61326/seasons/12345'],
    )
    user: User = Field(..., description='The creator of this On Demand page.')


class OnDemandVideo(BaseModel):
    buy: Buy1 = Field(..., description='Information about purchasing this video.')
    description: Optional[str] = Field(
        None,
        description='Description of the On Demand video.',
        examples=[
            'DARBY FOREVER follows the fantasies of Darby, a shopgirl at "Bobbins & Notions".'
        ],
    )
    duration: Optional[str] = Field(
        None, description='The duration of the On Demand video.', examples=['1197']
    )
    episode: Optional[float] = Field(
        None, description='The episode number of the On Demand video.', examples=[1]
    )
    interactions: Interactions5 = Field(
        ...,
        description='An object containing information about how the authenticated user can interact with this On Demand page.',
    )
    link: str = Field(
        ...,
        description='The link to this video on Vimeo.',
        examples=['https://vimeo.com/ondemand/darbyforever/12345'],
    )
    metadata: Metadata11 = Field(
        ..., description='Metadata information about this video.'
    )
    name: Optional[str] = Field(
        None,
        description='The title of the On Demand video.',
        examples=['Darby Forever'],
    )
    options: Optional[List[str]] = Field(
        None, description='An array of HTTP methods permitted on this URI.'
    )
    pictures: Optional[Picture] = Field(
        None, description='The active picture for this video.'
    )
    play_progress: float = Field(
        ...,
        description="The user's most recent play position in seconds for this video.",
        examples=[30],
    )
    position: Optional[float] = Field(
        None,
        description='Describes the manual position of this video relative to the other videos owned by this On Demand page.',
        examples=[1],
    )
    release_date: Optional[str] = Field(
        None,
        description='The time in ISO 8601 format when the On Demand video was created or published.',
        examples=['2017-05-12T21:06:42+00:00'],
    )
    release_year: float = Field(
        ...,
        description='The year that this On Demand video was released.',
        examples=[2016],
    )
    rent: Rent1 = Field(..., description='Information about renting this video.')
    type: Type6 = Field(
        ...,
        description='The type of the On Demand video:\n\nOption descriptions:\n * `extra` - The On Demand video is an extra feature.\n * `main` - The On Demand video is a main feature.\n * `trailer` - The On Demand video is a trailer.\n',
        examples=['main'],
    )
    uri: str = Field(
        ...,
        description="The video container's relative URI.",
        examples=['/ondemand/pages/61326/videos/12345'],
    )
    user: Optional[User] = Field(None, description='The owner of the video.')


class Presets(BaseModel):
    metadata: Metadata13 = Field(..., description='Metadata about the album.')
    name: str = Field(
        ...,
        description='The display name of the presets group.',
        examples=['Minimalism'],
    )
    settings: Settings = Field(..., description='The contents of the presets group.')
    uri: str = Field(
        ...,
        description='The canonical relative URI of the presets object.',
        examples=['/users/152184/presets/12345'],
    )
    user: User = Field(..., description='The owner of the preset.')


class Project(BaseModel):
    created_time: str = Field(
        ...,
        description='The time in ISO 8601 format when the project was created.',
        examples=['2017-05-23T14:36:22+00:00'],
    )
    metadata: Metadata14 = Field(..., description="The project's metadata.")
    modified_time: str = Field(
        ...,
        description='The time in ISO 8601 format when the project was last modified.',
        examples=['2017-05-23T14:36:22+00:00'],
    )
    name: str = Field(
        ..., description='The name of the folder.', examples=['Rough cuts']
    )
    resource_key: str = Field(
        ...,
        description='The resource key string of the project.',
        examples=['dc724af18fbdd4e59189f5fe768a5f8311527050'],
    )
    uri: str = Field(
        ..., description='The URI of the project.', examples=['/me/projects/12345']
    )
    user: User = Field(..., description='The owner of the project.')


class Video(BaseModel):
    categories: List[Category] = Field(
        ..., description='The categories to which this video belongs.'
    )
    content_rating: List[str] = Field(
        ..., description='The content ratings of this video.'
    )
    context: Context = Field(
        ...,
        description="The context of the video's subscription, if this video is part of a subscription.",
    )
    created_time: str = Field(
        ...,
        description='The time in ISO 8601 format when the video was created.',
        examples=['2018-03-05T21:04:47+00:00'],
    )
    description: str = Field(
        ...,
        description="A brief explanation of the video's content.",
        examples=['A celebration of 10 years of Staff Picks.'],
    )
    duration: float = Field(
        ..., description="The video's duration in seconds.", examples=[81]
    )
    embed: EmbedSettings = Field(
        ..., description='Information about embedding this video.'
    )
    height: float = Field(
        ..., description="The video's height in pixels.", examples=[1080]
    )
    language: str = Field(
        ..., description="The video's primary language.", examples=['en-US']
    )
    last_user_action_event_date: Optional[str] = Field(
        None,
        description='The time in ISO 8601 format when the user last modified the video.',
        examples=['2018-03-21T23:08:22+00:00'],
    )
    license: License = Field(
        ...,
        description='The [Creative Commons](http://creativecommons.org/licenses/) license used for the video:\n\nOption descriptions:\n * `by` - Attribution\n * `by-nc` - Attribution Non-Commercial\n * `by-nc-nd` - Attribution Non-Commercial No Derivatives\n * `by-nc-sa` - Attribution Non-Commercial Share Alike\n * `by-nd` - Attribution No Derivatives\n * `by-sa` - Attribution Share Alike\n * `cc0` - Public Domain Dedication\n',
        examples=['by'],
    )
    link: str = Field(
        ...,
        description='The link to the video.',
        examples=['https://vimeo.com/258684937'],
    )
    metadata: Metadata17 = Field(..., description="The video's metadata.")
    modified_time: str = Field(
        ...,
        description='The time in ISO 8601 format when the video metadata was last modified.',
        examples=['2018-09-16T09:02:40+00:00'],
    )
    name: str = Field(
        ...,
        description="The video's title.",
        examples=['Celebrating 10 Years of Staff Picks'],
    )
    parent_folder: Optional[Project] = Field(
        None, description='Information about the folder that contains this video.'
    )
    password: Optional[str] = Field(
        None,
        description='The privacy-enabled password to watch this video. Only users can see their own video passwords. This data requires a bearer token with the `private` scope.',
        examples=['hunter1'],
    )
    pictures: Picture = Field(..., description='The active picture for this video.')
    privacy: Privacy4 = Field(..., description="The video's privacy setting.")
    release_time: str = Field(
        ...,
        description='The time in ISO 8601 format when the video was released.',
        examples=['2018-03-05T21:04:47+00:00'],
    )
    resource_key: str = Field(
        ...,
        description='The resource key string of the video.',
        examples=['bac1033deba2310ebba2caec33c23e4beea67aba'],
    )
    spatial: Spatial = Field(..., description='360 spatial data.')
    stats: Stats = Field(
        ..., description='A collection of stats associated with this video.'
    )
    status: Status1 = Field(
        ...,
        description="The status code for the availability of the video. This field is deprecated in favor of `upload` and `transcode`.\n\nOption descriptions:\n * `available` - The video is available.\n * `quota_exceeded` - The user's quota is exceeded with this video.\n * `total_cap_exceeded` - The user has exceeded their total cap with this video.\n * `transcode_starting` - Transcoding is beginning for the video.\n * `transcoding` - Transcoding is underway for the video.\n * `transcoding_error` - There was an error in transcoding the video.\n * `unavailable` - The video is unavailable.\n * `uploading` - The video is being uploaded.\n * `uploading_error` - There was an error in uploading the video.\n",
        examples=['available'],
    )
    tags: List[Tag] = Field(
        ..., description='An array of all tags assigned to this video.'
    )
    transcode: Transcode = Field(
        ..., description='The transcode information for a video upload.'
    )
    upload: Upload = Field(..., description='The upload information for this video.')
    uri: str = Field(
        ...,
        description="The video's canonical relative URI.",
        examples=['/videos/258684937'],
    )
    user: User = Field(..., description='The video owner.')
    width: float = Field(
        ..., description="The video's width in pixels.", examples=[1920]
    )


class CategoriesGetResponse(RootModel[List[Category]]):
    root: List[Category]


class CategoriesCategoryChannelsGetResponse(RootModel[List[Channel]]):
    root: List[Channel]


class CategoriesCategoryGroupsGetResponse(RootModel[List[Group]]):
    root: List[Group]


class CategoriesCategoryVideosGetResponse(RootModel[List[Video]]):
    root: List[Video]


class ChannelsGetResponse(RootModel[List[Channel]]):
    root: List[Channel]


class ChannelsChannelIdCategoriesGetResponse(RootModel[List[Category]]):
    root: List[Category]


class ChannelsChannelIdVideosGetResponse(RootModel[List[Video]]):
    root: List[Video]


class ChannelsChannelIdVideosVideoIdCommentsGetResponse(RootModel[List[Comment]]):
    root: List[Comment]


class GroupsGetResponse(RootModel[List[Group]]):
    root: List[Group]


class GroupsGroupIdVideosGetResponse(RootModel[List[Video]]):
    root: List[Video]


class MeAlbumsGetResponse(RootModel[List[Album]]):
    root: List[Album]


class MeAlbumsAlbumIdVideosGetResponse(RootModel[List[Video]]):
    root: List[Video]


class MeAppearancesGetResponse(RootModel[List[Video]]):
    root: List[Video]


class MeCategoriesGetResponse(RootModel[List[Category]]):
    root: List[Category]


class MeChannelsGetResponse(RootModel[List[Channel]]):
    root: List[Channel]


class MeGroupsGetResponse(RootModel[List[Group]]):
    root: List[Group]


class MeLikesGetResponse(RootModel[List[Video]]):
    root: List[Video]


class MePortfoliosPortfolioIdVideosGetResponse(RootModel[List[Video]]):
    root: List[Video]


class MePresetsGetResponse(RootModel[List[Presets]]):
    root: List[Presets]


class MePresetsPresetIdVideosGetResponse(RootModel[List[Video]]):
    root: List[Video]


class MeProjectsGetResponse(RootModel[List[Project]]):
    root: List[Project]


class MeProjectsProjectIdVideosGetResponse(RootModel[List[Video]]):
    root: List[Video]


class MeVideosGetResponse(RootModel[List[Video]]):
    root: List[Video]


class MeWatchedVideosGetResponse(RootModel[List[Video]]):
    root: List[Video]


class MeWatchlaterGetResponse(RootModel[List[Video]]):
    root: List[Video]


class OndemandPagesOndemandIdSeasonsGetResponse(RootModel[List[OnDemandSeason]]):
    root: List[OnDemandSeason]


class OndemandPagesOndemandIdSeasonsSeasonIdVideosGetResponse(RootModel[List[Video]]):
    root: List[Video]


class OndemandPagesOndemandIdVideosGetResponse(RootModel[List[Video]]):
    root: List[Video]


class TagsWordVideosGetResponse(RootModel[List[Video]]):
    root: List[Video]


class UsersUserIdAlbumsGetResponse(RootModel[List[Album]]):
    root: List[Album]


class UsersUserIdAlbumsAlbumIdVideosGetResponse(RootModel[List[Video]]):
    root: List[Video]


class UsersUserIdAppearancesGetResponse(RootModel[List[Video]]):
    root: List[Video]


class UsersUserIdCategoriesGetResponse(RootModel[List[Category]]):
    root: List[Category]


class UsersUserIdChannelsGetResponse(RootModel[List[Channel]]):
    root: List[Channel]


class UsersUserIdGroupsGetResponse(RootModel[List[Group]]):
    root: List[Group]


class UsersUserIdLikesGetResponse(RootModel[List[Video]]):
    root: List[Video]


class UsersUserIdPortfoliosPortfolioIdVideosGetResponse(RootModel[List[Video]]):
    root: List[Video]


class UsersUserIdPresetsGetResponse(RootModel[List[Presets]]):
    root: List[Presets]


class UsersUserIdPresetsPresetIdVideosGetResponse(RootModel[List[Video]]):
    root: List[Video]


class UsersUserIdProjectsGetResponse(RootModel[List[Project]]):
    root: List[Project]


class UsersUserIdProjectsProjectIdVideosGetResponse(RootModel[List[Video]]):
    root: List[Video]


class UsersUserIdVideosGetResponse(RootModel[List[Video]]):
    root: List[Video]


class UsersUserIdWatchlaterGetResponse(RootModel[List[Video]]):
    root: List[Video]


class VideosGetResponse(RootModel[List[Video]]):
    root: List[Video]


class VideosVideoIdAvailableChannelsGetResponse(RootModel[List[Channel]]):
    root: List[Channel]


class VideosVideoIdCategoriesGetResponse(RootModel[List[Category]]):
    root: List[Category]


class VideosVideoIdCommentsGetResponse(RootModel[List[Comment]]):
    root: List[Comment]


class VideosVideoIdCommentsCommentIdRepliesGetResponse(RootModel[List[Comment]]):
    root: List[Comment]


class VideosVideoIdVideosGetResponse(RootModel[List[Video]]):
    root: List[Video]


class Activity31(BaseModel):
    category: Optional[Category] = Field(
        None,
        description='The category that this event occurred for. This will be preset for only "category" activity types.',
    )
    channel: Optional[Channel] = Field(
        None,
        description='The channel that this event occurred for. This will be present for only "channel" activity types.',
    )
    clip: Video = Field(..., description='Video associated with ths activity.')
    group: Optional[Group] = Field(
        None,
        description='The group that this event occurred for. This will be present for only "group" activity types.',
    )
    metadata: Metadata = Field(..., description="The activity's metadata.")
    tag: Optional[Tag] = Field(
        None,
        description='The tag that this event occurred for. This will be present for only "tag" activity types.',
    )
    time: str = Field(
        ...,
        description='Time that the event occurred.',
        examples=['2017-05-17T17:46:09+00:00'],
    )
    type: Type = Field(..., description='Activity type', examples=['appearance'])
    user: Optional[User] = Field(
        None,
        description='The user that this event occurred for. This will be present for "like", "appearance", and "share" activity types.',
    )


class Credit(BaseModel):
    name: str = Field(
        ..., description='The name of the person credited.', examples=['Sam Doe']
    )
    role: str = Field(
        ...,
        description='The character that this person portrayed, or the job that this person performed.',
        examples=['Themselves'],
    )
    uri: str = Field(
        ...,
        description='The unique identifier to access the credits resource.',
        examples=['/videos/258684937/credits/1234'],
    )
    user: Optional[User] = Field(
        None, description='The Vimeo user associated with this credit.'
    )
    video: Optional[Video] = Field(
        None, description='The video associated with this credit.'
    )


class OnDemandPage(BaseModel):
    background: Picture = Field(
        ..., description='The background image for the On Demand page on Vimeo.'
    )
    colors: Colors = Field(
        ...,
        description='The primary and secondary colors used for rendering this On Demand page.',
    )
    content_rating: List[str] = Field(
        ..., description="An array of the page's content ratings."
    )
    created_time: Optional[str] = Field(
        None,
        description='The time in ISO 8601 format when the page was created.',
        examples=['2017-05-15T13:42:25+00:00'],
    )
    description: str = Field(
        ...,
        description='The description of this On Demand page.',
        examples=[
            'DARBY FOREVER follows the fantasies of Darby, a shopgirl at "Bobbins & Notions"'
        ],
    )
    domain_link: str = Field(
        ...,
        description='The link to this page on its own domain.',
        examples=['https://example.com'],
    )
    episodes: Episodes = Field(
        ...,
        description="Information about this On Demand page's episodes, if the page is for a series.",
    )
    film: Optional[Video] = Field(
        None, description="This On Demand page's film, if it is a film."
    )
    genres: List[OnDemandGenre] = Field(
        ..., description='All the genres assigned to this page.'
    )
    link: str = Field(
        ...,
        description='The link to the page on Vimeo.',
        examples=['https://vimeo.com/ondemand/darbyforever'],
    )
    metadata: Metadata7 = Field(..., description='Metadata about the On Demand page.')
    modified_time: Optional[str] = Field(
        None,
        description='he time in ISO 8601 format when the page was last modified.',
        examples=['2017-05-15T13:42:25+00:00'],
    )
    name: str = Field(
        ...,
        description='A descriptive title of this On Demand page.',
        examples=['Darby Forever'],
    )
    pictures: Picture = Field(
        ..., description='The active poster for this On Demand page.'
    )
    preorder: Preorder
    published: Published
    rating: float = Field(..., description='The rating of this page.', examples=[7])
    resource_key: str = Field(
        ...,
        description='The VOD resource key.',
        examples=['bac1033deba2310ebba2caec33c23e4beea67aba'],
    )
    sku: Optional[str] = Field(
        None,
        description='The creator-designated SKU for this On Demand page.',
        examples=['VIME0001'],
    )
    subscription: Subscription = Field(
        ...,
        description='Information about subscribing to this On Demand page, if enabled.',
    )
    theme: str = Field(
        ...,
        description='The graphical theme for this On Demand page.',
        examples=['vader'],
    )
    thumbnail: Picture = Field(
        ..., description='The thumbnail image for the On Demand page on Vimeo.'
    )
    trailer: Video = Field(..., description='The trailer for this On Demand page.')
    type: Type4 = Field(
        ...,
        description='Whether this On Demand page is for a film or a series.\n\nOption descriptions:\n * `film` - The On Demand page is for a film.\n * `series` - The On Demand page is for a series.\n',
        examples=['film'],
    )
    uri: str = Field(
        ...,
        description='The relative URI of the On Demand page.',
        examples=['/ondemand/pages/61326'],
    )
    user: User = Field(..., description='The user who created this On Demand page.')


class UploadAttempt(BaseModel):
    clip: Optional[Video] = Field(None, description='The video to upload.')
    complete_uri: Optional[str] = Field(
        None,
        description='The completion URI of the upload.',
        examples=[
            '/users/152184/uploads/12345?video_file_id=5678&upgrade=true&signature=r394y347ffefeff434'
        ],
    )
    form: Optional[str] = Field(None, description='The HTML upload form.')
    ticket_id: str = Field(
        ...,
        description='The ticket identifier string for the upload.',
        examples=['3da5dac09'],
    )
    upload_link: str = Field(
        ...,
        description='The upload URL.',
        examples=['https://123456.cloud.vimeo.com/upload?ticket_id=1234asdf'],
    )
    uri: str = Field(
        ..., description='The upload URI.', examples=['/users/152184/uploads/12345']
    )
    user: User = Field(..., description='The owner of the uploaded video.')


class ChannelsChannelIdVideosVideoIdCreditsGetResponse(RootModel[List[Credit]]):
    root: List[Credit]


class MeFeedGetResponse(RootModel[List[Activity31]]):
    root: List[Activity31]


class MeOndemandPagesGetResponse(RootModel[List[OnDemandPage]]):
    root: List[OnDemandPage]


class MeOndemandPurchasesGetResponse(RootModel[List[OnDemandPage]]):
    root: List[OnDemandPage]


class OndemandGenresGenreIdPagesGetResponse(RootModel[List[OnDemandPage]]):
    root: List[OnDemandPage]


class UsersUserIdFeedGetResponse(RootModel[List[Activity31]]):
    root: List[Activity31]


class UsersUserIdOndemandPagesGetResponse(RootModel[List[OnDemandPage]]):
    root: List[OnDemandPage]


class VideosVideoIdCreditsGetResponse(RootModel[List[Credit]]):
    root: List[Credit]
